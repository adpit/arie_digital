var relearn_search_index=[{breadcrumb:"",content:`Discover what this Hugo theme is all about and the core-concepts behind it.
`,description:"",tags:null,title:"Basics",uri:"/_basics/index.html"},{breadcrumb:"Shortcodes > Children",content:`This is a plain demo child page.
`,description:`This is a plain page test, and the beginning of a YAML multiline description...
`,tags:["Children"],title:"page X",uri:"/_shortcodes/children/test/index.html"},{breadcrumb:"Content",content:`In Hugo, pages are the core of your site. Once it is configured, pages are definitely the added value to your documentation site.
Folders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.
content ├── level-one │ ├── level-two │ │ ├── level-three │ │ │ ├── level-four │ │ │ │ ├── _index.md <-- /level-one/level-two/level-three/level-four │ │ │ │ ├── page-4-a.md <-- /level-one/level-two/level-three/level-four/page-4-a │ │ │ │ ├── page-4-b.md <-- /level-one/level-two/level-three/level-four/page-4-b │ │ │ │ └── page-4-c.md <-- /level-one/level-two/level-three/level-four/page-4-c │ │ │ ├── _index.md <-- /level-one/level-two/level-three │ │ │ ├── page-3-a.md <-- /level-one/level-two/level-three/page-3-a │ │ │ ├── page-3-b.md <-- /level-one/level-two/level-three/page-3-b │ │ │ └── page-3-c.md <-- /level-one/level-two/level-three/page-3-c │ │ ├── _index.md <-- /level-one/level-two │ │ ├── page-2-a.md <-- /level-one/level-two/page-2-a │ │ ├── page-2-b.md <-- /level-one/level-two/page-2-b │ │ └── page-2-c.md <-- /level-one/level-two/page-2-c │ ├── _index.md <-- /level-one │ ├── page-1-a.md <-- /level-one/page-1-a │ ├── page-1-b.md <-- /level-one/page-1-b │ └── page-1-c.md <-- /level-one/page-1-c ├── _index.md <-- / └── page-top.md <-- /page-top Note _index.md is required in each folder, it’s your “folder home page”
Create your project The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you to train by following great documentation for beginners.
Hugo provides a new command to create a new website.
hugo new site <new_project>The Relearn theme provides archetypes to help you create this kind of pages.
Frontmatter Configuration Each Hugo page has to define a frontmatter in toml, yaml or json. This site will use toml in all cases.
The Relearn theme uses the following parameters on top of Hugo ones:
+++ # Table of contents (toc) is enabled by default. Set this parameter to true to disable it. # Note: Toc is always disabled for chapter pages disableToc = false # If set, this will be used for the page's menu entry (instead of the \`title\` attribute) menuTitle = "" # If set to true, the menu in the sidebar will be displayed in a collapsible tree view. Although the functionality works with old browsers (IE11), the display of the expander icons is limited to modern browsers collapsibleMenu = false # If set, this will explicitly override common rules for the expand state of a page's menu entry alwaysopen = true # If set, this will explicitly override common rules for the sorting order of a page's submenu entries ordersectionsby = "title" # The title of the page heading will be prefixed by this HTML content headingPre = "" # The title of the page heading will be postfixed by this HTML content headingPost = "" # The title of the page in menu will be prefixed by this HTML content menuPre = "" # The title of the page in menu will be postfixed by this HTML content menuPost = "" # Hide a menu entry by setting this to true hidden = false # Display name of this page modifier. If set, it will be displayed in the footer. LastModifierDisplayName = "" # Email of this page modifier. If set with LastModifierDisplayName, it will be displayed in the footer LastModifierEmail = "" # Override default values for image effects, you can even add your own arbitrary effects to the list [params.imageEffects] border = false lightbox = true shadow = false +++Add icon to a menu entry In the page frontmatter, add a menuPre param to insert any HTML code before the menu label. The example below uses the GitHub icon.
+++ title = "GitHub repo" menuPre = "<i class='fab fa-github'></i> " +++ Ordering sibling menu/page entries Hugo provides a flexible way to handle order for your pages.
The simplest way is to set weight parameter to a number.
+++ title = "My page" weight = 5 +++Using a custom title for menu entries By default, the Relearn theme will use a page’s title attribute for the menu item (or linkTitle if defined).
But a page’s title has to be descriptive on its own while the menu is a hierarchy. We’ve added the menuTitle parameter for that purpose:
For example (for a page named content/install/linux.md):
+++ title = "Install on Linux" menuTitle = "Linux" +++Override expand state rules for menu entries You can change how the theme expands menu entries on the side of the content with the alwaysopen setting on a per page basis. If alwaysopen=false for any given entry, its children will not be shown in the menu as long as it is not necessary for the sake of navigation.
The theme generates the menu based on the following rules:
all parent entries of the active page including their siblings are shown regardless of any settings immediate children entries of the active page are shown regardless of any settings if not overridden, all other first level entries behave like they would have been given alwaysopen=false if not overridden, all other entries of levels besides the first behave like they would have been given alwaysopen=true all visible entries show their immediate children entries if alwaysopen=true; this proceeds recursively all remaining entries are not shown You can see this feature in action on the example page for children shortcode and its children pages.
Disable Section Pages You may want to structure your pages in a hierachical way but don’t want to generate pages for those sections? The theme got you covered.
To stay with the initial example: Suppose you want level-one appear in the sidebar but don’t want to generate a page for it. So the entry in the sidebar should not be clickable but should show an expander.
For this, open content/level-one/_index.md and add the following frontmatter
collapsibleMenu = true # this adds the expander to the menu entry if not already set in your config.toml [_build] render = "never" # no page will be generated so the page does not have a url`,description:"",tags:null,title:"Pages organization",uri:"/_cont/pages/index.html"},{breadcrumb:"Content",content:`Using the command: hugo new [relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more: archetypes. These are preconfigured skeleton pages with default frontmatter.
The Relearn theme defines some few archetypes of pages but you are free to define new ones to your liking. All can be used at any level of the documentation, the only difference being the layout of the content.
Predefined Archetypes Home A Home page is the starting page of your project. It’s best to have only one page of this kind in your project.
To create a home page, run the following command
hugo new --kind home _index.mdThis leads to a file with the following content
+++ archetype = "home" title = "{{ replace .Name "-" " " | title }}" +++ Lorem Ipsum.Chapter A Chapter displays a page meant to be used as introduction for a set of child pages. Commonly, it contains a simple title and a catch line to define content that can be found below it.
To create a chapter page, run the following command
hugo new --kind chapter <name>/_index.mdThis leads to a file with the following content
+++ archetype = "chapter" title = "{{ replace .Name "-" " " | title }}" weight = X +++ Lorem Ipsum.Replace the X with a number. Because this number will be used to generate the subtitle of the chapter page, set the number to a consecutive value starting at 1 for each new chapter level.
Default A Default page is any other content page. If you set an unknown archetype in your frontmatter, this archetype will be used to generate the page.
To create a default page, run either one of the following commands
hugo new <chapter>/<name>/_index.mdor
hugo new <chapter>/<name>.mdThis leads to a file with the following content
+++ title = "{{ replace .Name "-" " " | title }}" weight = X +++ Lorem Ipsum.Replace the X with a number or delete the whole weight parameter entirely.
Self defined Archetypes If you are in need of further archetypes you can define your own or even redefine existing ones.
Template Define a template file in your project at archetypes/<kind>.md and make sure it has at least the frontmatter parameter for that archetype like
+++ archetype = "<kind>" +++Afterwards you can generate new content files of that kind with the following command
hugo new --kind <kind> <name>/_index.mdPartials To define how your archetypes are rendered, define corresponding partial files in your projects directory layouts/partials/archetypes/<kind>.
If you use an unknown archetype in your frontmatter, the default archetype will be used to generate the page.
Related to each archetype, several hook partial files in the form of <hook>.html can be given inside each archetype directory. If a partial for a specific hook is missing, no output is generated for this hook.
The following hooks are used:
Name Notes styleclass Defines a set of CSS classes to be added to the HTML’s <main> element. You can use these classes to define own CSS rules in your custom-header.html article Defines the HTML how to render your content Take a look at the existing archetypes of this theme to get an idea how to utilize it.
Output formats Each hook file can be overridden of a specific output format. Eg. if you define a new output format PLAINTEXT in your config.toml, you can add a file layouts/partials/archetypes/default.plaintext.html to change the way how normal content is written for that output format.
`,description:"",tags:null,title:"Archetypes",uri:"/_cont/archetypes/index.html"},{breadcrumb:"",content:`Find out how to create and organize your content quickly and intuitively.
`,description:"",tags:null,title:"Content",uri:"/_cont/index.html"},{breadcrumb:"Basics",content:`This document shows you what’s new in the latest release. For a detailed list of changes, see the history page.
0.95.0 The minimum required Hugo version.
Breaking A change that requires action by you after upgrading to assure the site is still functional.
Change A change in default behavior that may requires action by you if you want to revert it.
New Marks new behavior you might find interesting or comes configurable.
5.23.0 (2023-10-03) New It is now possible to print custom taxonomies anywhere in you page. See the docs.
New It is now possible to adjust the menu width for your whole site. See the docs.
5.22.0 (2023-10-02) Change This release fixes an issue where in unfortunate conditions DOM ids generated by Hugo may collide with DOM ids set by the theme. To avoid this, all theme DOM ids are now prefixed with R-.
If you haven’t modified anything, everything is fine. Otherwise you have to check your custom CSS rules and JavaScript code.
Change You can now have structural sections in the hierarchical menu without generating a page for it.
This can come in handy, if content for such a section page doesn’t make much sense to you. See the documentation for how to do this.
This feature may require you to make changes to your existing installation if you are already using shortcuts to pages inside of your project with a headless branch parent.
In this case it is advised to remove the title from the headless branch parent’s frontmatter, as it will otherwise appear in your breadcrumbs.
New It is now possible to overwrite the setting for collapsibleMenu of your config.toml inside of a page’s frontmatter.
New If a Mermaid graph is zoomable a button to reset the view is now added to the upper right corner. The button is only shown once the mouse is moved over the graph.
New It is now possible to remove the root breadcrumb by setting disableRootBreadcrumb=true in your config.toml.
New The output of the dedicated search page now displays the result’s breadcrumb.
New Table rows now change their background color on every even row.
New Translation into Swahili. This language is not supported for search.
5.21.0 (2023-09-18) Change We made changes to the menu footer to improve alignment with the menu items in most cases. Care was taken not to break your existing overwritten footer. Anyways, if you have your menu-footer.html partial overridden, you may want to review the styling (eg. margins/paddings) of your partial.
New This release comes with an awesome new feature, that allows you to customize your topbar buttons, change behavior, reorder them or define entirely new ones, unique to your installation. See the documentation for further details.
New The theme has updated its Swagger dependency to 5.7.2 for the openapi shortcode. This brings support for OpenAPI Specification 3.1.
5.20.0 (2023-08-26) Change The theme has updated its Swagger dependency to 5.4.1 for the openapi shortcode.
With this comes a change in the light theme variants of Relearn Bright, Relearn Light and Zen Light by switching the syntaxhighlightning inside of openapi to a light scheme. This brings it more in sync with the code style used by the theme variants itself.
Additionally, the syntaxhighlightning inside of openapi for printing was switched to a light scheme for all theme variants.
If you dislike this change, you can revert this in your theme variants CSS by adding
--OPENAPI-CODE-theme: obsidian; --PRINT-OPENAPI-CODE-theme: obsidian; Change For consistency reasons, we renamed the CSS variable --MENU-SECTION-HR-color to --MENU-SECTION-SEPARATOR-color. You don’t need to change anything in your custom color stylesheet as the old name will be used as a fallback.
New The theme variants Zen Light and Zen Dark now add more contrast between menu, topbar and content by adding thin borders.
Those borders are now configurable by using the CSS variables --MAIN-TOPBAR-BORDER-color, --MENU-BORDER-color, --MENU-TOPBAR-BORDER-color, --MENU-TOPBAR-SEPARATOR-color, --MENU-HEADER-SEPARATOR-color and --MENU-SECTION-ACTIVE-CATEGORY-BORDER-color.
For existing variants nothing has changed visually.
New The default values for the image effects are now configurable for your whole site via config.toml or for each page thru frontmatter.
New This release fixes a long outstanding bug where Mermaid graphs could not be displayed if they were initially hidden - like in collapsed expand or inactive tabs.
New Restored compatibility with Hugo versions lower than 0.111.0 for the highlight shortcode. This does not change the minimum required Hugo version.
5.19.0 (2023-08-12) New The highlight shortcode now accepts the new parameter title. This displays the code like a single tab. This is also available using codefences and makes it much easier to write nicer code samples.
New The theme has added two new color variants zen-light and zen-dark. Check it out!
New The theme now dispatches the custom event themeVariantLoaded on the document when the variant is fully loaded either initially or by switching the variant manually with the variant selector.
New The theme has updated its Mermaid dependency to 10.3.1. This adds support for the sankey diagram type and now comes with full support for YAML inside Mermaid graphs (previously, the theme ignored explicit Mermaid theme settings in YAML).
New Translation into Hungarian.
5.18.0 (2023-07-27) Change The theme adds additional warnings for deprecated or now unsupported features. The warnings include hints how to fix them and an additional link to the documenation.
DEPRECATION warnings mark features that still work but may be removed in the future.
UNSUPPORTED warnings mark features that will not work anymore.
Change There are visual improvements in displaying text links in your content aswell as to some other clickable areas in the theme. If you’ve overwritten some theme styles in your own CSS, keep this in mind.
New Restored compatibility with Hugo 0.95.0 or higher. This does not change the minimum required Hugo version.
New The siteparam shortcode is now capable in displaying nested params aswell as supporting text formatting.
5.17.0 (2023-06-22) Change The default behavior for the copy-to-clipboard feature for code blocks has changed.
The copy-to-clipboard button for code blocks will now only be displayed if the reader hovers the code block.
If you dislike this new behavior you can turn it off and revert to the old behavior by adding [params] disableHoverBlockCopyToClipBoard=true to your config.toml.
New Restored compatibility with Hugo 0.114.0 or higher. This does not change the minimum required Hugo version.
New The new highlight shortcode replaces Hugo’s default implementation and is fully compatible. So you don’t need to change anything.
In addition it offers some extensions. Currently only the wrap extension option is provided to control whether a code block should be wrapped or scrolled if to long to fit.
5.16.0 (2023-06-10) Change The theme now provides warnings for deprecated or now unsupported features. The warnings include hints how to fix them and an additional link to the documenation.
DEPRECATION warnings mark features that still work but may be removed in the future.
UNSUPPORTED warnings mark features that will not work anymore.
Change The 404 error page was revamped. Hopefully you will not see this very often.
New The tabs shortcode and the tab shortcode received some love and now align with their style, color, title and icon parameter to the other shortcodes.
The visuals are now slightly different compared to previous versions. Most noteable, if you now display a single code block in a tab, its default styling will adapt to that of a code block but with a tab handle at the top.
Additionally the name parameter was renamed to title but you don’t need to change anything yet as the old name will be used as a fallback. Nevertheless you will get deprecation warnings while executing Hugo.
New The theme now optionally supports separate favicons for light & dark mode.
5.15.0 (2023-05-29) Change Restored compatibility with Hugo 0.112.0 or higher. This does not change the minimum required Hugo version.
The attachments shortcode has compatiblity issues with newer Hugo versions. You must switch to leaf bundles or are locked to Hugo < 0.112.0 for now.
It is planned to refactor the attchments shortcode in the future. This will make it possible to use the shortcode in branch bundles again but not in simple pages anymore. This will most likely come with a breaking change.
Change The tabs shortcode has changed behavior if you haven’t set the groupid parameter.
Formerly all tab views without a groupid were treated as so they belong to the same group. Now, each tab view is treated as it was given a unique id.
New The already known tabshas a new friend the tab shortcode to make it easier to create a tab view in case you only need one single tab. Really handy if you want to flag your code examples with a language identifier.
Additionally for such a use case, the whitespace between a tab outline and the code is removed if only a single code block is contained.
New Besides the tag taxonomy the theme now also provides the category taxonomy out of the box and shows them in the content footer of each page.
5.14.0 (2023-05-20) New The taxonomy pages received some love in this release, making them better leverage available screen space and adding translation support for the taxonomy names.
Hugo’s default taxonmies tags and categories are already contained in the theme’s i18n files. If you have self-defined taxonomies, you can add translations by adding them to your own i18n files. If you don’t provide translations, the singualar and plural forms are taken as configured in your config.toml.
New To give you more flexibility in customizing your article layout a new partial content-header.html is introduced.
This came out of the requirement to customize the position of article tags, which by default are displayed above the title. A second requirement was to also show additional taxonomies not supported by the theme natively. While Hugo supports tags and categories by default, the theme only displays tags.
So how to adjust the position of tags starting from the theme’s default where tags are only shown above the title?
Hide tags above title: Overwrite content-header.html with an empty file. Show tags between title and content: Overwrite heading-post.html and add {{- partial "tags.html" . }} to it. Show tags below content: Overwrite content-footer.html and add {{- partial "tags.html" . }} to it. New The new parameter breadcrumbSeparator is now available in your config.toml to change the - well - separator of the breadcrumb items. An appropriate default is in place if you do not configure anything.
5.13.0 (2023-05-17) Change The swagger shortcode was deprecated in favor for the openapi shortcode. You don’t need to change anything yet as the old name will be used as a fallback. It is planned to remove the swagger shortcode in the next major release.
Additionally, the implemantion of this shortcode was switched from RapiDoc to SwaggerUI.
5.12.0 (2023-05-04) Change In the effort to comply with WCAG standards, the implementation of the collapsible menu was changed (again). While Internet Explorer 11 has issues in displaying it, the functionality still works.
New Support for the great VSCode Front Matter extension which provides on-premise CMS capabilties to Hugo.
The theme provides Front Matter snippets for its shortcodes. Currently only English and German is supported. Put a reference into your frontmatter.json like this
{ ... "frontMatter.extends": [ "./vscode-frontmatter/snippets.en.json" ] ... } New Support for languages that are written right to left (like Arabic) is now complete and extended to the menu, the top navigation bar and print. You can experience this in the pirate translation. This feature is not available in Internet Explorer 11.
New The scrollbars are now colored according to their variant color scheme to better fit into the visuals.
5.11.0 (2023-02-07) Change The theme removed the popular jQuery library from its distribution.
In case you made changes to the theme that are dependend on this library you can place a copy of jQuery into your static/js directory and load it from your own layouts/partials/custom-header.html like this:
<script src="{{"js/jquery.min.js"| relURL}}" defer></script> Change Mermaid diagrams can now be configured for pan and zoom on site-, page-level or individually for each graph.
The default setting of on, in effect since 1.1.0, changed back to off as there was interference with scrolling on mobile and big pages.
Change The theme is now capable to visually adapt to your OS’s light/dark mode setting.
This is also the new default setting if you haven’t configured themeVariant in your config.toml.
Additionally you can configure the variants to be taken for light/dark mode with the new themeVariantAuto parameter.
This is not supported for Internet Explorer 11, which still displays in the relearn-light variant.
Change The JavaScript code for handling image lightboxes (provided by Featherlight) was replaced by a CSS-only solution.
This also changed the lightbox effects parameter from featherlight=false to lightbox=false. Nevertheless you don’t need to change anything as the old name will be used as a fallback.
Change In the effort to comply with WCAG standards, the implementation of the expand shortcode was changed. While Internet Explorer 11 has issues in displaying it, the functionality still works.
New Translation into Czech. This language is not supported for search.
New GitHub releases are also now tagged for the main version (eg. 1.2.x), major version (eg. 1.x) and the latest (just x) release making it easier for you to pin the theme to a certain version.
5.10.0 (2023-01-25) New The attachments, badge, button and notice shortcodes have a new parameter color to set arbitrary CSS color values.
Additionally the --ACCENT-color brand color introduced in version 5.8.0 is now supported with these shortcodes.
5.9.0 (2022-12-23) Breaking With this version it is now possible to not only have sections on the first menu level but also pages.
It was later discovered, that this causes pages only meant to be displayed in the More section of the menu and stored directly inside your content directory to now show up in the menu aswell.
To [get rid]/]() of this undesired behavior you have two choices:
Make the page file a headless branch bundle (contained in its own subdirectory and called _index.md) and add the following frontmatter configuration to the file (see exampleSite’s content/showcase/_index.en.md). This causes its content to not be ontained in the sitemap.
title = "Showcase" [_build] render = "always" list = "never" publishResources = true Store the page file for below a parent headless branch bundle and add the following frontmatter to he parent (see exampleSite’s content/more/_index.en.md).
# title = "More" ### ATTENTION: Don't give this page a title as this will cause it to be in the breadcrumbs - a thing you most likely don't want [_build] render = "never" list = "never" publishResources = falseIn this case, the file itself can be a branch bundle, leaf bundle or simple page (see exampleSite’s content/more/credits.en.md). This causes its content to be contained in the sitemap.
title = "Credits" Change The required folder name for the attachments shortcode was changed for leaf bundles.
Previously, the attachments for leaf bundles in non-multilang setups were required to be in a files subdirectory. For page bundles and leaf bundles in multilang setups they were always required to be in a _index.<LANGCODE>.files or index.<LANGCODE>.files subdirectory accordingly.
This added unnessessary complexity. So attachments for leaf bundles in non-multilang setups can now also reside in a index.files directory. Although the old files directory is now deprecated, if both directories are present, only the old files directory will be used for compatiblity.
Change Absolute links prefixed with http:// or https:// are now opened in a separate browser tab.
You can revert back to the old behavior by defining externalLinkTarget="_self" in the params section of your config.toml.
New The theme now supports Hugo’s module system.
5.8.0 (2022-12-08) New The new badge shortcode is now available to add highly configurable markers to your content as you can see it on this page.
New The new icon shortcode simplyfies the usage of icons. This can even be combined with also new badge shortcode.
New The theme now supports some of GFM (GitHub Flavored Markdown) syntax and Hugo Markdown extensions, namely task lists, defintion lists and footnotes.
New A new color --ACCENT-color was introduced which is used for highlightning search results on the page. In case you simply don’t care, you don’t need to change anything in your variant stylesheet as the old yellow color is still used as default.
5.7.0 (2022-11-29) Change The Korean language translation for this theme is now available with the language code ko. Formerly the country code kr was used instead.
New The button shortcode can now also be used as a real button inside of HTML forms - although this is a pretty rare use case. The documentation was updated accordingly.
New The search now supports the Korean language.
5.6.0 (2022-11-18) New This release introduces an additional dedicated search page. On this page, displayed search results have more space making it easier scanning thru large number of results.
To activate this feature, you need to configure it in your config.toml as a new outputformat SEARCHPAGE for the home page. If you don’t configure it, no dedicated search page will be accessible and the theme works as before.
You can access the search page by either clicking on the magnifier glass or pressing enter inside of the search box.
New Keyboard handling for the TOC and search was improved.
Pressing CTRL+ALT+t now will not only toggle the TOC overlay but also places the focus to the first heading on opening. Subsequently this makes it possible to easily select headings by using the TAB key.
The search received its own brand new keyboard shortcut CTRL+ALT+f. This will focus the cursor inside of the the search box so you can immediately start your search by typing.
New You are now able to turn off the generation of generator meta tags in your HTML head to hide the used versions of Hugo and this theme.
To configure this in your config.toml make sure to set Hugo’s disableHugoGeneratorInject=true and also [params] disableGeneratorVersion=true, otherwise Hugo will generate a meta tag into your home page automagically.
New Creation of your project gets a little bit faster with this release.
This addresses increased build time with the 5.x releases. The theme now heavily caches partial results leading to improved performance. To further increase performance, unnecessary parts of the page are now skipped for creation of the print output (eg. menus, navigation bar, etc.).
5.5.0 (2022-11-06) Change The way images are processed has changed. Now images are lazy loaded by default which speeds up page load on slow networks and/or big pages and also the print preview.
For that the JavaScript code to handle the lightbox and image effects on the client side was removed in favour for static generation of those effects on the server.
If you have used HTML directly in your Markdown files, this now has the downside that it doesn’t respect the effect query parameter anymore. In this case you have to migrate all your HTML img URLs manually to the respective HTML attributes.
Old New <img src="pic.png?width=20vw&classes=shadow,border"> <img src="pic.png" style="width:20vw;" class="shadow border"> 5.4.0 (2022-11-01) Change With the proper settings in your config.toml your page is now servable from the local file system using file:// URLs.
Please note that the searchbox will only work for this if you reconfigure your outputformat for the homepage in your config.toml from JSON to SEARCH. The now deprecated JSON outputformat still works as before, so there is no need to reconfigure your installation if it is only served from http:// or https://.
Change The button shortcode has a new parameter target to set the destination frame/window for the URL to open. If not given, it defaults to a new window/tab for external URLs or is not set at all for internal URLs. Previously even internal URLs where opened in a new window/tab.
New The math shortcode and mermaid shortcode now also support the align parameter if codefence syntax is used.
New Support for languages that are written right to left (like Arabic). This is only implemented for the content area but not the navigation sidebar. This feature is not available in Internet Explorer 11.
New Translation into Finnish (Suomi).
5.3.0 (2022-10-07) Change In the effort to comply with WCAG standards, the implementation of the collapsible menu was changed. The functionality of the new implementation does not work with old browsers (Internet Explorer 11).
New Image formatting has two new classes to align images to the left or right. Additionally, the already existing inline option is now documented.
New Printing for the swagger shortcode was optimized to expand sections that are usually closed in interactive mode. This requires print support to be configured.
5.2.0 (2022-08-03) Change If you’ve set collapsibleMenu = true in your config.toml, the menu will be expanded if a search term is found in a collapsed submenu. The menu will return to its initial collapse state once the search term does not match any submenus. 5.1.0 (2022-07-15) 0.95.0 This release requires a newer Hugo version.
Change Because the print preview URLs were non deterministic for normal pages in comparison to page bundles, this is now changed. Each print preview is now accessible by adding a index.print.html to the default URL.
You can revert this behavior by overwriting the PRINT output format setting in your config.tomlto:
[outputFormats] [outputFormats.PRINT] name= "PRINT" baseName = "index" path = "_print" isHTML = true mediaType = 'text/html' permalinkable = false 5.0.0 (2022-07-05) Breaking The theme changed how JavaScript and CSS dependencies are loaded to provide a better performance. In case you’ve added own JavaScript code that depends on the themes jQuery implementation, you have to put it into a separate *.js file (if not already) and add the defer keyword to the script element. Eg.
<script defer src="myscript.js"></script> Change The way archetypes are used to generate output has changed. The new systems allows you, to redefine existing archetypes or even generate your own ones.
Your existing markdown files will still work like before and therefore you don’t need to change anything after the upgrade. Nevertheless, it is recommended to adapt your existing markdown files to the new way as follows:
for your home page, add the frontmatter parameter archetype = "home" and remove the leading heading
for all files containing the deprecated frontmatter parameter chapter = true, replace it with archetype = "chapter" and remove the leading headings
Change The frontmatter options pre / post were renamed to menuPre / menuPost. The old options will still be used if the new options aren’t set. Therefore you don’t need to change anything after the upgrade.
New Adding new partials heading-pre.html / heading-post.html and according frontmatter options headingPre / headingPost to modify the way your page\`s main heading gets styled.
New The new shortcode math is available to add beautiful math and chemical formulae. See the documentation for available features. This feature will not work with Internet Explorer 11.
4.2.0 (2022-06-23) Breaking The second parameter for the include shortcode was switched in meaning and was renamed from showfirstheading to hidefirstheading. If you haven’t used this parameter in your shortcode, the default behavior hasn’t changed and you don’t need to change anything.
If you’ve used the second boolean parameter, you have to rename it and invert its value to achieve the same behavior.
Change Previously, if the tabs shortcode could not find a tab item because, the tabs ended up empty. Now the first tab is selected instead.
Change The landingPageURL was removed from config.toml. You can safely remove this as well from your configuration as it is not used anymore. The theme will detect the landing page URL automatically and will point to the project’s homepage. If you want to support a different link, overwrite the logo.html partial.
New All shortcodes can now be also called from your partials. Examples for this are added to the documentation of each shortcode.
4.1.0 (2022-06-12) New While fixing issues with the search functionality for non Latin languages, you can now configure to have multiple languages on a single page. 4.0.0 (2022-06-05) Breaking The custom_css config parameter was removed from the configuration. If used in an existing installation, it can be achieved by overriding the custom-header.html template in a much more generic manner.
Breaking Because anchor hover color was not configurable without introducing more complexity to the variant stylesheets, we decided to remove --MAIN-ANCHOR-color instead. You don’t need to change anything in your custom color stylesheet as the anchors now get their colors from --MAIN-LINK-color and --MAIN-ANCHOR-HOVER-color respectively.
New All shortcodes now support named parameter. The positional parameter are still supported but will not be enhanced with new features, so you don’t need to change anything in your installation.
This applies to expand, include, notice and siteparam.
New The button shortcode received some love and now has a parameter for the color style similar to other shortcodes.
New New colors --PRIMARY-color and --SECONDARY-color were added to provide easier modification of your custom style. Shortcodes with a color style can now have primary or secondary as additional values.
These two colors are the default for other, more specific color variables. You don’t need to change anything in your existing custom color stylesheets as those variables get reasonable default values.
New Translation into Polish. This language is not supported for search.
New The documentation for all shortcodes were revised.
3.4.0 (2022-04-03) Breaking If you had previously overwritten the custom-footer.html partial to add visual elements below the content of your page, you have to move this content to the new partial content-footer.html. custom-footer.html was never meant to contain HTML other than additional styles and JavaScript.
New If you prefer expandable/collapsible menu items, you can now set collapsibleMenu=true in your config.toml. This will add arrows to all menu items that contain sub menus. The menu will expand/collapse without navigation if you click on an arrow.
New You can activate print support in your config.toml to add the capability to print whole chapters or even the complete site.
New Translation into Traditional Chinese.
3.3.0 (2022-03-28) New Introduction of new CSS variables to set the font. The theme distinguishes between --MAIN-font for all content text and --CODE-font for inline or block code. There are additional overrides for all headings. See the theme variant generator of the exampleSite for all available variables.
New The new shortcode swagger is available to include a UI for REST OpenAPI specifications. See the documentation for available features. This feature will not work with Internet Explorer 11.
3.2.0 (2022-03-19) 0.93.0 This release requires a newer Hugo version.
Change In this release the Mermaid JavaScript library will only be loaded on demand if the page contains a Mermaid shortcode or is using Mermaid codefences. This changes the behavior of disableMermaid config option as follows: If a Mermaid shortcode or codefence is found, the option will be ignored and Mermaid will be loaded regardlessly.
The option is still useful in case you are using scripting to set up your graph. In this case no shortcode or codefence is involved and the library is not loaded by default. In this case you can set disableMermaid=false in your frontmatter to force the library to be loaded. See the theme variant generator of the exampleSite for an example.
New Additional color variant variable --MERMAID-theme to set the variant’s Mermaid theme. This causes the Mermaid theme to switch with the color variant if it defers from the setting of the formerly selected color variant.
3.1.0 (2022-03-15) New attachment and notice shortcodes have a new parameter to override the default icon. Allowed values are all Font Awesome 5 Free icons. 3.0.0 (2022-02-22) Breaking We made changes to the menu footer. If you have your menu-footer.html partial overridden, you may have to review the styling (eg. margins/paddings) in your partial. For a reference take a look into the menu-footer.html partial that is coming with the exampleSite.
This change was made to allow your own menu footer to be placed right after the so called prefooter that comes with the theme (containing the language switch and Clear history functionality).
Breaking We have changed the default colors from the original Learn theme (the purple menu header) to the Relearn defaults (the light green menu header) as used in the official documentation.
This change will only affect your installation if you’ve not set the themeVariant parameter in your config.toml. If you still want to use the Learn color variant, you have to explicitly set themeVariant="learn" in your config.toml.
Note, that this will also affect your site if viewed with Internet Explorer 11 but in this case it can not be reconfigured as Internet Explorer does not support CSS variables.
Change Due to a bug, that we couldn’t fix in a general manner for color variants, we decided to remove --MENU-SEARCH-BOX-ICONS-color and introduced --MENU-SEARCH-color instead. You don’t need to change anything in your custom color stylesheet as the old name will be used as a fallback.
Change For consistency reasons, we renamed --MENU-SEARCH-BOX-color to --MENU-SEARCH-BORDER-color. You don’t need to change anything in your custom color stylesheet as the old name will be used as a fallback.
New With this release you are now capable to define your own dark mode variants.
To make this possible, we have introduced a lot more color variables you can use in your color variants. Your old variants will still work and don’t need to be changed as appropriate fallback values are used by the theme. Nevertheless, the new colors allow for much more customization.
To see what’s now possible, see the new variants relearn-dark and neon that are coming with this release.
New To make the creation of new variants easier for you, we’ve added a new interactive theme variant generator. This feature will not work with Internet Explorer 11.
New You can now configure multiple color variants in your config.toml. In this case, the first variant is the default chosen on first view and a variant switch will be shown in the menu footer. See the documentation for configuration.
Note, that the new variant switch will not work with Internet Explorer 11 as it does not support CSS variables. Therefore, the variant switcher will not be displayed with Internet Explorer 11.
2.9.0 (2021-11-19) Breaking This release removes the themes implementation of ref/relref in favor for Hugos standard implementation. This is because of inconsistencies with the themes implementation. In advantage, your project becomes standard compliant and exchanging this theme in your project to some other theme will be effortless.
In a standard compliant form you must not link to the *.md file but to its logical name. You’ll see, referencing other pages becomes much easier. All three types result in the same reference:
Type Non-Standard Standard Branch bundle basics/configuration/_index.md basics/configuration Leaf bundle basics/configuration/index.md basics/configuration Page basics/configuration.md basics/configuration If you’ve linked from a page of one language to a page of another language, conversion is a bit more difficult but Hugo got you covered as well.
Also, the old themes implementation allowed refs to non-existing content. This will cause Hugos implementation to show the error below and abort the generation. If your project relies on this old behavior, you can reconfigure the error handling of Hugos implementation.
In the best case your usage of the old implementation is already standard compliant and you don’t need to change anything. You’ll notice this very easily once you’ve started hugo server after an upgrade and no errors are written to the console.
You may see errors on the console after the update in the form:
ERROR 2021/11/19 22:29:10 [en] REF_NOT_FOUND: Ref "basics/configuration/_index.md": "hugo-theme-relearn\\exampleSite\\content\\_index.en.md:19:22": page not foundIn this case, you must apply one of two options:
Start up a text editor with regular expression support for search and replace. Search for (ref\\s+"[^"]*?)(?:/_index|/index)?(?:\\.md)?(#[^"]*?)?" and replace it by $1$2" in all *.md files. This is the recommended choice.
Copy the old implementation files theme/hugo-theme-relearn/layouts/shortcode/ref.html and theme/hugo-theme-relearn/layouts/shortcode/relref.html to your own projects layouts/shortcode/ref.html and layouts/shortcode/relref.html respectively. This is not recommended as your project will still rely on non-standard behavior afterwards.
2.8.0 (2021-11-03) Change Although never officially documented, this release removes the font Novacento/Novecento. If you use it in an overwritten CSS please replace it with Work Sans. This change was necessary as Novacento did not provide all Latin special characters and lead to mixed styled character text eg. for Czech.
New The theme now supports favicons served from static/images/ named as favicon or logo in SVG, PNG or ICO format out of the box. An overridden partial layouts/partials/favicon.html may not be necessary anymore in most cases.
New You can hide the table of contents menu for the whole site by setting the disableToc option in your config.toml. For an example see the example configuration.
2.7.0 (2021-10-24) New Optional second parameter for notice shortcode to set title in box header. 2.6.0 (2021-10-21) New Your site can now be served from a subfolder if you set baseURL and canonifyURLs=true in your config.toml. See the documentation for a detailed example. 2.5.0 (2021-10-08) Change New colors --CODE-BLOCK-color and --CODE-BLOCK-BG-color were added to provide a fallback for Hugos syntax highlighting in case guessSyntax=true is set. Ideally the colors are set to the same values as the ones from your chosen chroma style. 2.4.0 (2021-10-07) Change Creation of customized stylesheets was simplified down to only contain the CSS variables. Everything else can and should be deleted from your custom stylesheet to assure everything works fine. For the predefined stylesheet variants, this change is already included.
New Hidden pages are displayed by default in their according tags page. You can now turn off this behavior by setting disableTagHiddenPages=true in your config.toml.
New You can define the expansion state of your menus for the whole site by setting the alwaysopen option in your config.toml. Please see further documentation for possible values and default behavior.
New New frontmatter ordersectionsby option to change immediate children sorting in menu and children shortcode. Possible values are title or weight.
New Alternate content of a page is now advertised in the HTML meta tags. See Hugo documentation.
2.3.0 (2021-09-13) 0.81.0 This release requires a newer Hugo version.
New Showcase multilanguage features by providing a documentation translation “fer us pirrrates”. There will be no other translations besides the original English one and the Pirates one due to maintenance constraints.
2.2.0 (2021-09-09) New Hidden pages are displayed by default in the sitemap generated by Hugo and are therefore visible for search engine indexing. You can now turn off this behavior by setting disableSeoHiddenPages=true in your config.toml. 2.1.0 (2021-09-07) 0.69.0 This release requires a newer Hugo version.
Change In case the site’s structure contains additional *.md files not part of the site (eg files that are meant to be included by site pages - see CHANGELOG.md in the exampleSite), they will now be ignored by the search.
New Hidden pages are indexed for the site search by default. You can now turn off this behavior by setting disableSearchHiddenPages=true in your config.toml.
New If a search term is found in an expand shortcode, the expand will be opened.
New The menu will scroll the active item into view on load.
2.0.0 (2021-08-28) Change Syntax highlighting was switched to the built in Hugo mechanism. You may need to configure a new stylesheet or decide to roll you own as described on in the Hugo documentation
Change In the predefined stylesheets there was a typo and --MENU-HOME-LINK-HOVERED-color must be changed to --MENU-HOME-LINK-HOVER-color. You don’t need to change anything in your custom color stylesheet as the old name will be used as a fallback.
Change --MENU-HOME-LINK-color and --MENU-HOME-LINK-HOVER-color were missing in the documentation. You should add them to your custom stylesheets if you want to override the defaults.
Change Arrow navigation and children shortcode were ignoring setting for ordersectionsby. This is now changed and may result in different sorting order of your sub pages.
Change If hidden pages are accessed directly by typing their URL, they will be exposed in the menu.
Change A page without a title will be treated as hidden=true.
New You can define the expansion state of your menus in the frontmatter. Please see further documentation for possible values and default behavior.
New New partials for defining pre/post content for menu items and the content. See documentation for further reading.
New Shortcode children with new parameter containerstyle.
New New shortcode include to include arbitrary file content into a page.
1.2.0 (2021-07-26) New Shortcode expand with new parameter to open on page load. 1.1.0 (2021-07-02) Breaking Mermaid diagrams can now be panned and zoomed. This isn’t configurable yet.
New Mermaid config options can be set in config.toml.
1.0.0 (2021-07-01) 0.65.0 The requirement for the Hugo version of this theme is the same as for the Learn theme version 2.5.0 on 2021-07-01.
New Initial fork of the Learn theme based on Learn 2.5.0 on 2021-07-01. This introduces no new features besides a global rename to Relearn and a new logo. For the reasons behind forking the Learn theme, see this comment in the Learn issues.
`,description:"",tags:null,title:"What's New",uri:"/_basics/migration/index.html"},{breadcrumb:"Content",content:`Let’s face it: Writing content for the web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.
Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.
Some of the key benefits are:
Markdown is simple to learn, with minimal extra characters so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid HTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this:
The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. John Gruber
Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:
Tip Bookmark this page and the official Commonmark reference for easy future reference!
Paragraphs In Markdown your content usually spans the whole available document width. This is called a block. Blocks are always separated by whitespace to their adjacent blocks in the resulting document.
Any text not starting with a special sign is written as normal, plain text paragraph block and must be separated to its adjacent blocks by empty lines.
Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. Result Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus.
Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.
Headings A good idea is to structure your content using headings and subheadings. HTML-headings from h1 through h6 are constructed with a # for each level.
In Hugo you usually don’t use h1 as this is generated by your theme and you should only have one such element in a document.
# h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading Result h1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Horizontal Rules To further structure your content you can add horizontal rules. They create a “thematic break” between paragraph blocks. In Markdown, you can create it with three consecutive dashes ---.
Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. --- Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. Result Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus.
Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.
Text Markers Bold You can show importance of a snippet of text with a heavier font-weight by enclosing it with two asterisks **.
I am rendered with **bold text** Result I am rendered with bold text
Italics You can emphasize a snippet of text with italics by enclosing it with underscores _.
I am rendered with _italicized text_ Result I am rendered with italicized text
Strikethrough In GFM (GitHub Flavored Markdown) you can do strikethroughs by enclosing text with two tildes ~~.
~~Strike through this text~~ Result Strike through this text
Text substitution This Markdown dialect supports an extension to combine multiple punctuation characters to single typographic entities. This will only be applied to text outside of code blocks or inline code.
Double quotes \`"\` and single quotes \`'\` of enclosed text are replaced by **"double curly quotes"** and **'single curly quotes'**. Double dashes \`--\` and triple dashes \`---\` are replaced by en-dash **--** and em-dash **---** entities. Double arrows pointing left \`<<\` or right \`>>\` are replaced by arrow **<<** and **>>** entities. Three consecutive dots \`...\` are replaced by an ellipsis **...** entity. Result Double quotes " and single quotes ' of enclosed text are replaced by “double curly quotes” and ‘single curly quotes’.
Double dashes -- and triple dashes --- are replaced by en-dash – and em-dash — entities.
Double arrows pointing left << or right >> are replaced by arrow « and » entities.
Three consecutive dots ... are replaced by an ellipsis … entity.
Lists Unordered You can write a list of items in which the order of the items does not explicitly matter.
It is possible to nest lists by indenting an item for the next sublevel.
You may use any of -, * or + to denote bullets for each list item but should not switch between those symbols inside one whole list.
- Lorem ipsum dolor sit amet - Consectetur adipiscing elit - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at - Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Faucibus porta lacus fringilla vel Result Lorem ipsum dolor sit amet Consectetur adipiscing elit Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Faucibus porta lacus fringilla vel Ordered You can create a list of items in which the order of items does explicitly matter.
It is possible to nest lists by indenting an item for the next sublevel.
Markdown will automatically number each of your items consecutively. This means, the order number you are providing is irrelevant.
1. Lorem ipsum dolor sit amet 3. Consectetur adipiscing elit 1. Integer molestie lorem at massa 7. Facilisis in pretium nisl aliquet 99. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 17. Eget porttitor lorem Result Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem Tasks In GFM (GitHub Flavored Markdown) you can add task lists resulting in checked or unchecked non-clickable items
- [x] Basic Test - [ ] More Tests - [x] View - [x] Hear - [ ] Smell Result Basic Test More Tests View Hear Smell Definitions This Markdown dialect supports an extension to add definition lists. Definition lists are made of terms and definitions of these terms, much like in a dictionary.
A definition list in Markdown Extra is made of a single-line term followed by a colon and the definition for that term. You can also associate more than one term to a definition.
If you add empty lines around the definition terms, additional vertical space will be generated. Also multiple paragraphs are possible
Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. : An American computer company. Orange : The fruit of an evergreen tree of the genus Citrus. You can make juice out of it. : A telecommunication company. You can't make juice out of it. Result Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. An American computer company. Orange The fruit of an evergreen tree of the genus Citrus. You can make juice out of it.
A telecommunication company. You can’t make juice out of it.
Code Inline Code Inline snippets of code can be wrapped with backticks \`.
In this example, \`<div></div>\` is marked as code. Result In this example, <div></div> is marked as code.
Indented Code Block A simple code block can be generated by indenting several lines of code by at least two spaces.
Be impressed by my advanced code: // Some comments line 1 of code line 2 of code line 3 of code Result Be impressed by my advanced code:
// Some comments line 1 of code line 2 of code line 3 of code Fenced Code Block If you want to gain more control of your code block you can enclose your code by at least three backticks \`\`\` a so called fence.
In GFM (GitHub Flavored Markdown) you can also add a language specifier directly after the opening fence, \`\`\`js, and syntax highlighting will automatically be applied according to the selected language in the rendered HTML.
See Code Highlighting for additional documentation.
\`\`\`js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; \`\`\` Result grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Tables In GFM (GitHub Flavored Markdown) you can create tables by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.
| Option | Description | |--------|-------------| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | Result Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Aligned Columns Adding a colon on the left and/or right side of the dashes below any heading will align the text for that column accordingly.
| Option | Number | Description | |-------:|:------:|:------------| | data | 1 | path to data files to supply the data that will be passed into templates. | | engine | 2 | engine to be used for processing templates. Handlebars is the default. | | ext | 3 | extension to be used for dest files. | Result Option Number Description data 1 path to data files to supply the data that will be passed into templates. engine 2 engine to be used for processing templates. Handlebars is the default. ext 3 extension to be used for dest files. Blockquotes For quoting blocks of content from another source within your document add > before any text you want to quote.
Blockquotes can also be nested.
> Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. > > > Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. > > Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus. Result Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.
Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.
Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.
Links Autolink In GFM (GitHub Flavored Markdown) absolute URLs will automatically be converted into a link.
This is a link to https://example.com. Result This is a link to https://example.com.
Basic Link You can explicitly define links in case you want to use non-absolute URLs or want to give different text.
[Assemble](http://assemble.io) Result Assemble
Link with Tooltip For even further information, you can add an additional text, displayed in a tooltip on hovering over the link.
[Upstage](https://github.com/upstage/ "Visit Upstage!") Result Upstage
Link References Links can be simplyfied for recurring reuse by using a reference ID to later define the URL location. This simplyfies writing if you want to use a link more than once in a document.
[Example][somelinkID] [somelinkID]: https://example.com "Go to example domain" Result Example
Footnotes Footnotes work mostly like reference-style links. A footnote is made of two things, a marker in the text that will become a superscript number and a footnote definition that will be placed in a list of footnotes.
Usually the list of footnotes will be shown at the end of your document. If we use a footnote in a notice box it will instead be listed at the end of its box.
Footnotes can contain block elements, which means that you can put multiple paragraphs, lists, blockquotes and so on in a footnote. It works the same as for list items, just indent the following paragraphs by four spaces in the footnote definition.
That's some text with a footnote[^1] [^1]: And that's the footnote. That's some more text with a footnote.[^someid] [^someid]: Anything of interest goes here. Blue light glows blue. Result That’s some text with a footnote1
That’s some more text with a footnote.2
And that’s the footnote. ↩︎
Anything of interest goes here.
Blue light glows blue. ↩︎
Images Basic Images Images have a similar syntax to links but include a preceding exclamation mark.
![Spock](https://octodex.github.com/images/spocktocat.png) Result Image with Tooltip Like links, images can also be given a tooltip.
![Picard](https://octodex.github.com/images/jean-luc-picat.jpg "Jean Luc Picard") Result Image References Images can also be linked by reference ID to later define the URL location. This simplyfies writing if you want to use an image more than once in a document.
![La Forge][laforge] [laforge]: https://octodex.github.com/images/trekkie.jpg "Geordi La Forge" Result Image Effects This theme allows additional non-standard formatting by setting query parameter at the end of the image URL. The default behavior is configurable thru your config.toml or frontmatter parameter.
Resizing Add query parameter width and/or height to the link image to resize the image. Values are CSS values (default is auto).
![Minion](https://octodex.github.com/images/minion.png?width=20vw) Result ![Minion](https://octodex.github.com/images/minion.png?height=50px) Result ![Minion](https://octodex.github.com/images/minion.png?height=50px&width=40vw) Result CSS Classes Add a query parameter classes to the link image to add CSS classes. Add some of the predefined values or even define your own in your CSS.
Shadow ![Spidertocat](https://octodex.github.com/images/spidertocat.png?classes=shadow) Result Border ![DrOctocat](https://octodex.github.com/images/droctocat.png?classes=border) Result Left ![Supertocat](https://octodex.github.com/images/okal-eltocat.jpg?classes=left) Result Right ![Riddlocat](https://octodex.github.com/images/riddlocat.jpg?classes=right) Result Inline ![Spidertocat](https://octodex.github.com/images/spidertocat.png?classes=inline) ![DrOctocat](https://octodex.github.com/images/droctocat.png?classes=inline) ![Supertocat](https://octodex.github.com/images/okal-eltocat.jpg?classes=inline) ![Riddlocat](https://octodex.github.com/images/riddlocat.jpg?classes=inline) Result Combination ![X-tocat](https://octodex.github.com/images/xtocat.jpg?classes=shadow,border,left) Result Lightbox Add the query parameter lightbox=false to the image link to disable the lightbox.
![Homercat](https://octodex.github.com/images/homercat.png?lightbox=false) Result Note If you want to wrap an image in a link and lightbox=true is your default setting, you have to explicitly disable the lightbox to avoid it to hijacking your link like:
[![Homercat](https://octodex.github.com/images/homercat.png?lightbox=false)](https://octodex.github.com/#homercat)
`,description:"",tags:["Content"],title:"Markdown syntax",uri:"/_cont/markdown/index.html"},{breadcrumb:"",content:`Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.
But this happens to be a bad idea. Everyone uses Markdown because it’s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.
To avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet inside a page.
The Relearn theme provides multiple shortcodes on top of existing ones.
AttachmentsList of files attached to a page
BadgeMarker badges to display in your text
ButtonClickable buttons
ChildrenList the child pages of a page
ExpandExpandable/collapsible sections of text
HighlightRender code with a syntax highlighter
IconNice icons for your page
IncludeDisplays content from other files
MathBeautiful math and chemical formulae
MermaidGenerate diagrams and flowcharts from text
NoticeDisclaimers to help you structure your page
OpenAPIUI for your OpenAPI / Swagger specifications
SiteParamGet value of site params
TabShow content in a single tab
TabsShow content in tabbed views
`,description:"",tags:null,title:"Shortcodes",uri:"/_shortcodes/index.html"},{breadcrumb:"",content:`This chapter contains information only needed for development and maintaining the theme.
ContributingWhat to know if you want to contribute
MaintainingWhat to know as a maintainer
ScreenshotsRecipe to create various documentation screenshots
`,description:"",tags:null,title:"Development",uri:"/_dev/index.html"},{breadcrumb:"Content",content:`The theme supports non-standard image effects.
As described, you can add this to the URL query parameter, but this may be cumbersome to do it consistently for the whole page.
Instead, you can configure the defaults in your config.toml aswell as overriding these default in the pages frontmatter.
Explicitly set URL query parameter will override the defaults in effect for a page.
Without any settings in your config.toml this defaults to
​ config.toml [params] [params.imageEffects] border = false lightbox = true shadow = false This can be overridden in a pages frontmatter by eg.
​ frontmatter +++ [imageEffects] border = true +++ Or by explicitly override settings by URL query parameter
​ URL ![Minion](https://octodex.github.com/images/minion.png?lightbox=false&bg-white=true) The settings applied to the above image would be
​ Result border = true lightbox = false shadow = false bg-white = true This ends up in the following HTML where the parameter are converted to CSS classes.
​ HTML <img src="https://octodex.github.com/images/minion.png?lightbox=false&bg-white=true" alt="Minion" class="bg-white border nolightbox noshadow"> Extending As you can see in the above example, the bg-white parameter is not initially supported in the themes default settings. Nevertheless you are free to define arbitrary parameter by just adding them to the URL query parameter or set them in your config.toml or pages frontmatter.
Note If no extended parameter like bg-white in the example is set on the URL, a class="nobg-white" in the HTML will only be generated if a default value was set in the config.toml or pages frontmatter.
`,description:"",tags:null,title:"Image Effects",uri:"/_cont/imageeffects/index.html"},{breadcrumb:"Content",content:`You can define additional menu entries or shortcuts in the navigation menu without any link to content.
Basic configuration Edit the website configuration config.toml and add a [[menu.shortcuts]] entry for each link your want to add.
Example from the current website:
[[menu.shortcuts]] name = "<i class='fab fa-fw fa-github'></i> GitHub repo" identifier = "ds" url = "https://github.com/McShelby/hugo-theme-relearn" weight = 10 [[menu.shortcuts]] name = "<i class='fas fa-fw fa-camera'></i> Showcases" url = "showcase/" weight = 11 [[menu.shortcuts]] name = "<i class='fas fa-fw fa-bookmark'></i> Hugo Documentation" identifier = "hugodoc" url = "https://gohugo.io/" weight = 20 [[menu.shortcuts]] name = "<i class='fas fa-fw fa-bullhorn'></i> Credits" url = "more/credits/" weight = 30 [[menu.shortcuts]] name = "<i class='fas fa-fw fa-tags'></i> Tags" url = "tags/" weight = 40By default, shortcuts are preceded by a title. This title can be disabled by setting disableShortcutsTitle=true. However, if you want to keep the title but change its value, it can be overridden by changing your local i18n translation string configuration.
For example, in your local i18n/en.toml file, add the following content
[Shortcuts-Title] other = "<Your value>"Read more about hugo menu and hugo i18n translation strings
Configuration for Multilingual mode When using a multilingual website, you can set different menus for each language. In the config.toml file, prefix your menu configuration by Languages.<language-id>.
Example from the current website:
[languages] [languages.en] title = "Hugo Relearn Theme" weight = 1 languageName = "English" [languages.en.params] landingPageName = "<i class='fas fa-home'></i> Home" [[languages.en.menu.shortcuts]] name = "<i class='fab fa-fw fa-github'></i> GitHub repo" identifier = "ds" url = "https://github.com/McShelby/hugo-theme-relearn" weight = 10 [[languages.en.menu.shortcuts]] name = "<i class='fas fa-fw fa-camera'></i> Showcases" pageRef = "showcase/" weight = 11 [[languages.en.menu.shortcuts]] name = "<i class='fas fa-fw fa-bookmark'></i> Hugo Documentation" identifier = "hugodoc" url = "https://gohugo.io/" weight = 20 [[languages.en.menu.shortcuts]] name = "<i class='fas fa-fw fa-bullhorn'></i> Credits" pageRef = "more/credits/" weight = 30 [[languages.en.menu.shortcuts]] name = "<i class='fas fa-fw fa-tags'></i> Tags" pageRef = "tags/" weight = 40 [languages.pir] title = "Cap'n Hugo Relearrrn Theme" weight = 1 languageName = "Arrr! Pirrrates" [languages.pir.params] landingPageName = "<i class='fas fa-home'></i> Arrr! Home" [[languages.pir.menu.shortcuts]] name = "<i class='fab fa-fw fa-github'></i> GitHub repo" identifier = "ds" url = "https://github.com/McShelby/hugo-theme-relearn" weight = 10 [[languages.pir.menu.shortcuts]] name = "<i class='fas fa-fw fa-camera'></i> Showcases" pageRef = "showcase/" weight = 11 [[languages.pir.menu.shortcuts]] name = "<i class='fas fa-fw fa-bookmark'></i> Cap'n Hugo Documentat'n" identifier = "hugodoc" url = "https://gohugo.io/" weight = 20 [[languages.pir.menu.shortcuts]] name = "<i class='fas fa-fw fa-bullhorn'></i> Crrredits" pageRef = "more/credits/" weight = 30 [[languages.pir.menu.shortcuts]] name = "<i class='fas fa-fw fa-tags'></i> Arrr! Tags" pageRef = "tags/" weight = 40Read more about hugo menu and hugo multilingual menus
Shortcuts to pages inside of your project If you have shortcuts to pages inside of your project and you don’t want them to show up in page menu section, you have two choices:
Make the page file for the shortcut a headless branch bundle (contained in its own subdirectory and called _index.md) and add the following frontmatter configuration to the file (see exampleSite’s content/showcase/_index.en.md). This causes its content to not be ontained in the sitemap.
title = "Showcase" [_build] render = "always" list = "never" publishResources = true Store the page file for the shortcut below a parent headless branch bundle and add the following frontmatter to he parent (see exampleSite’s content/more/_index.en.md).
# title = "More" ### ATTENTION: Don't give this page a title as this will cause it to be in the breadcrumbs - a thing you most likely don't want [_build] render = "never" list = "never" publishResources = falseIn this case, the file itself can be a branch bundle, leaf bundle or simple page (see exampleSite’s content/more/credits.en.md). This causes its content to be contained in the sitemap.
title = "Credits" `,description:"",tags:null,title:"Menu extra shortcuts",uri:"/_cont/menushortcuts/index.html"},{breadcrumb:"Content",content:`The Relearn theme is fully compatible with Hugo multilingual mode.
Available languages: Arabic, Simplified Chinese, Traditional Chinese, Czech, Dutch, English, Finnish, French, German, Hindi, Hungarian, Indonesian, Italian, Japanese, Korean, Polish, Portuguese, Russian, Spanish, Swahili, Turkish, Vietnamese. Feel free to contribute! Full support for languages written right to left Automatic menu generation from multilingual content In-browser language switching Basic configuration After learning how Hugo handle multilingual websites, define your languages in your config.toml file.
For example with current English and Piratized English website.
Note Make sure your default language is defined as the first one in the [languages] array, as the theme needs to make assumptions on it
# English is the default language defaultContentLanguage = "en" [languages] [languages.en] title = "Hugo Relearn Theme" weight = 1 languageName = "English" [languages.pir] title = "Cap'n Hugo Relearrrn Theme" weight = 2 languageName = "Arrr! Pirrrates"Then, for each new page, append the id of the language to the file.
Single file my-page.md is split in two files: in English: my-page.md in Piratized English: my-page.pir.md Single file _index.md is split in two files: in English: _index.md in Piratized English: _index.pir.md Info Be aware that only translated pages are displayed in menu. It’s not replaced with default language content.
Tip Use slug frontmatter parameter to translate urls too.
Search In case each page’s content is written in one single language only, the above configuration will already configure the site’s search functionality correctly.
Warning Although the theme supports a wide variety of supported languages, the site’s search via the Lunr search library does not. You’ll see error reports in your browsers console log for each unsupported language. Currently unsupported are:
Czech Indonesian Polish Swahili Search with mixed language support In case your page’s content contains text in multiple languages (e.g. you are writing a Russian documentation for your english API), you can add those languages to your config.toml to broaden search.
[params] additionalContentLanguage = [ "en" ]As this is an array, you can add multiple additional languages.
Note Keep in mind that the language code required here, is the base language code. E.g. if you have additional content in zh-CN, you have to add just zh to this parameter.
Overwrite translation strings Translations strings are used for common default values used in the theme (Edit button, Search placeholder and so on). Translations are available in English and Piratized English but you may use another language or want to override default values.
To override these values, create a new file in your local i18n folder i18n/<idlanguage>.toml and inspire yourself from the theme themes/hugo-theme-relearn/i18n/en.toml
Disable language switching Switching the language in the browser is a great feature, but for some reasons you may want to disable it.
Just set disableLanguageSwitchingButton=true in your config.toml
[params] # When using multilingual website, disable the switch language button. disableLanguageSwitchingButton = true`,description:"",tags:null,title:"Multilingual and i18n",uri:"/_cont/i18n/index.html"},{breadcrumb:"Content",content:`The Relearn theme supports Hugo’s default taxonomies tag and category out of the box.
Configuration Just add tags and/or categories to any page. They can be given as a single string or an array of strings.
+++ categories = ["taxonomy", "content"] tags = "tutorial" title = "Taxonomy" +++Behavior The tags are displayed at the top of the page in alphabetical order.
The categories are displayed at the bottom of the page in alphabetical order in the default implementation of the theme but can be customized by providing your own content-footer.html partial.
Each item is a link to a taxonomy page displaying all the articles with the given term.
List all the tags In the config.toml file you can add a shortcut to display all the tags and categories
[[menu.shortcuts]] name = "<i class='fas fa-tags'></i> Tags" url = "/tags" [[menu.shortcuts]] name = "<i class='fas fa-layer-group'></i> Categories" url = "/categories"Customization If you define custom taxonomies and want to display a list of them somewhere on your page (often in the layouts/partials/content-footer.html) you can call a partial that does the job for you:
{{- partial "term-list.html" (dict "page" . "taxonomy" "categories" "icon" "layer-group" ) }}Parameter Name Default Notes page <empty> Mandatory reference to the page. taxonomy <empty> The plural name of the taxonomy to display as used in your frontmatter. class <empty> Additional CSS classes set on the outermost generated HTML element.
If set to tags you will get the visuals for displaying the tags taxonomy, otherwise it will be a simple list of links as for the categories taxonomy. style primary The style scheme used if class is tags.
- by severity: info, note, tip, warning
- by brand color: primary, secondary, accent
- by color: blue, green, grey, orange, red
- by special color: default, transparent, code color see notes The CSS color value to be used if class is tags. If not set, the chosen color depends on the style. Any given value will overwrite the default.
- for severity styles: a nice matching color for the severity
- for all other styles: the corresponding color icon <empty> An optional Font Awesome icon name set to the left of the list. `,description:"",tags:"tutorial",title:"Taxonomy",uri:"/_cont/taxonomy/index.html"},{breadcrumb:"Shortcodes > Children",content:`This is a demo child page.
Subpages of this page page 1-1 `,description:"This is a demo child page",tags:["children","non-hidden"],title:"page 1",uri:"/_shortcodes/children/children-1/index.html"},{breadcrumb:"Basics",content:`Thanks to the simplicity of Hugo, this page is as empty as this theme needs requirements.
Just download at least version 0.95.0 of the Hugo binary for your OS (Windows, Linux, Mac).
`,description:"",tags:null,title:"Requirements",uri:"/_basics/requirements/index.html"},{breadcrumb:"Basics",content:`The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.
Create your project Hugo provides a new command to create a new website.
hugo new site <new_project>Install the theme Install the Relearn theme by following this documentation using Hugo’s module system.
This theme’s repository is: https://github.com/McShelby/hugo-theme-relearn.git
Alternatively, you can download the theme as .zip file and extract it in the themes directory
From Git If you install the theme from your git repository or GitHub, you have several options.
If you use the head of the main branch, you are using the development version. Usually it is fully functional but can break from time to time. We try to fix newly introduced bugs in this version as soon as possible.
Additionally you can checkout one of the tagged versions. These tagged versions correspond to an official releases from the GitHub repository.
Besides the usual version tags (eg 1.2.3) there are also tags for the main version (eg. 1.2.x), major version (eg. 1.x) and the latest (just x) released version making it easier for you to pin the theme to a certain version.
Basic configuration When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. You can also add the [outputs] section to enable the search functionality.
# Change the default theme to be use when building the site with Hugo theme = "hugo-theme-relearn" # For search functionality [outputs] home = [ "HTML", "RSS", "SEARCH"]Create your first chapter page Chapters are pages that contain other child pages. It has a special layout style and usually just contains a chapter name, the title and a brief abstract of the section.
### Chapter 1 # Basics Discover what this Hugo theme is all about and the core concepts behind it.renders as
The Relearn theme provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command
hugo new --kind chapter basics/_index.mdBy opening the given file, you should see the property chapter=true on top, meaning this page is a chapter.
By default all chapters and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata.
Create your first content pages Then, create content pages inside the previously created chapter. Here are two ways to create content in the chapter:
hugo new basics/first-content.md hugo new basics/second-content/_index.mdFeel free to edit those files by adding some sample content and replacing the title value in the beginning of the files.
Launching the website locally Launch by using the following command:
hugo serveGo to http://localhost:1313
You should notice three things:
You have a left-side Basics menu, containing two submenus with names equal to the title properties in the previously created files. The home page explains how to customize it by following the instructions. When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Neat! Build the website When your site is ready to deploy, run the following command:
hugoA public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server.
Note This website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use GitHub pages.
`,description:"",tags:["documentation"],title:"Installation",uri:"/_basics/installation/index.html"},{breadcrumb:"Basics",content:`Global site parameters On top of Hugo global configuration, the Relearn theme lets you define the following parameters in your config.toml (here, values are default).
Note that some of these parameters are explained in details in other sections of this documentation.
[params] # This controls whether submenus will be expanded (true), or collapsed (false) in the # menu; if no setting is given, the first menu level is set to false, all others to true; # this can be overridden in the pages frontmatter alwaysopen = true # Prefix URL to edit current page. Will display an "Edit" button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = "" # Author of the site, will be used in meta information author = "" # Description of the site, will be used in meta information description = "" # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Disable search in hidden pages, otherwise they will be shown in search box disableSearchHiddenPages = false # Disables hidden pages from showing up in the sitemap and on Google (et all), otherwise they may be indexed by search engines disableSeoHiddenPages = false # Disables hidden pages from showing up on the tags page although the tag term will be displayed even if all pages are hidden disableTagHiddenPages = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don't handle well this optimization) disableAssetsBusting = false # Set this to true if you want to disable generation for generator version meta tags of hugo and the theme; # don't forget to also set Hugo's disableHugoGeneratorInject=true, otherwise it will generate a meta tag into your home page disableGeneratorVersion = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # Set this to true to disable the hover effect for copy-to-clipboard buttons for block code. disableHoverBlockCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # If set to false, a Home button will appear below the search bar on the menu. # It is redirecting to the landing page of the current language if specified. (Default is "/") disableLandingPageButton = true # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # Hide the root (first) breadcrumb in the header disableRootBreadcrumb = true # If set to true, hide table of contents menu in the header of all pages disableToc = false # If set to false, load the MathJax module on every page regardless if a MathJax shortcode is present disableMathJax = false # Specifies the remote location of the MathJax js customMathJaxURL = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" # Initialization parameter for MathJax, see MathJax documentation mathJaxInitialize = "{}" # If set to false, load the Mermaid module on every page regardless if a Mermaid shortcode or Mermaid codefence is present disableMermaid = false # Specifies the remote location of the Mermaid js customMermaidURL = "https://unpkg.com/mermaid/dist/mermaid.min.js" # Initialization parameter for Mermaid, see Mermaid documentation mermaidInitialize = "{ \\"theme\\": \\"default\\" }" # If set to false, load the OpenAPI module on every page regardless if a OpenAPI shortcode is present disableOpenapi = false # Specifies the remote location of the swagger-ui js customOpenapiURL = "https://unpkg.com/swagger-ui-dist/swagger-ui-bundle.js" # Hide Next and Previous page buttons displayed in topbar disableNextPrev = true # Order sections in menu by "weight" or "title". Default to "weight"; # this can be overridden in the pages frontmatter ordersectionsby = "weight" # Change default color scheme with a variant one. Eg. can be "auto", "red", "blue", "green" or an array like [ "blue", "green" ]. themeVariant = "auto" # Change the breadcrumb separator. Default to ">". breadcrumbSeparator = "|" # Change the title separator. Default to "::". titleSeparator = "-" # If set to true, the menu in the sidebar will be displayed in a collapsible tree view. Although the functionality works with old browsers (IE11), the display of the expander icons is limited to modern browsers collapsibleMenu = false # If a single page can contain content in multiple languages, add those here additionalContentLanguage = [ "en" ] # If set to true, no index.html will be appended to prettyURLs; this will cause pages not # to be servable from the file system disableExplicitIndexURLs = false # For external links you can define how they are opened in your browser; this setting will only be applied to the content area but not the shortcut menu externalLinkTarget = "_blank" # Override default values for image effects, you can even add your own arbitrary effects to the list [params.imageEffects] border = false lightbox = true shadow = falseServing your page from a subfolder If your site is served from a subfolder, eg. https://example.com/mysite/, you have to set the following lines to your config.toml
baseURL = "https://example.com/mysite/" canonifyURLs = true relativeURLs = trueWithout canonifyURLs=true URLs in sublemental pages (like sitemap.xml, rss.xml) will be generated falsly while your HTML files will still work. See https://github.com/gohugoio/hugo/issues/5226.
Serving your page from the filesystem If you want your page served from the filesystem by using URLs starting with file:// you’ll need the following configuration in your config.toml:
relativeURLs = trueThe theme will append an additional index.html to all branch bundle links by default to make the page be servable from the file system. If you don’t care about the file system and only serve your page via a webserver you can also generate the links without this change by adding this to your config.toml
[params] disableExplicitIndexURLs = true Note If you want to use the search feature from the file system using an older installation of the theme make sure to change your outputformat for the homepage from the now deprecated JSON to SEARCH as seen below.
Activate search If not already present, add the following lines in the same config.toml file.
[outputs] home = ["HTML", "RSS", "SEARCH"]This will generate a search index file at the root of your public folder ready to be consumed by the Lunr search library. Note that the SEARCH outputformat was named JSON in previous releases but was implemented differently. Although JSON still works, it is now deprecated.
Activate dedicated search page You can add a dedicated search page for your page by adding the SEARCHPAGE outputformat to your home page by adding the following lines in your config.toml file. This will cause Hugo to generate a new file http://example.com/mysite/search.html.
[outputs] home = ["HTML", "RSS", "SEARCH", "SEARCHPAGE"]You can access this page by either clicking on the magnifier glass or by typing some search term and pressing ENTER inside of the menu’s search box .
Note To have Hugo create the dedicated search page successfully, you must not generate the URL http://example.com/mysite/search.html from your own content. This can happen if you set uglyURLs=true in your config.toml and defining a Markdown file content/search.md.
To make sure, there is no duplicate content for any given URL of your project, run hugo --printPathWarnings.
Activate print support You can activate print support to add the capability to print whole chapters or even the complete site. Just add the PRINT output format to your home, section and page in your config.toml as seen below:
[outputs] home = ["HTML", "RSS", "PRINT", "SEARCH"] section = ["HTML", "RSS", "PRINT"] page = ["HTML", "RSS", "PRINT"]This will add a little printer icon in the top bar. It will switch the page to print preview when clicked. You can then send this page to the printer by using your browser’s usual print functionality.
Note The resulting URL will not be configured ugly in terms of Hugo’s URL handling even if you’ve set uglyURLs=true in your config.toml. This is due to the fact that for one mime type only one suffix can be configured.
Nevertheless, if you’re unhappy with the resulting URLs you can manually redefine outputFormats.PRINT in your own config.toml to your liking.
MathJax The MathJax configuration parameters can also be set on a specific page. In this case, the global parameter would be overwritten by the local one. See Math for additional documentation.
Example MathJax is globally disabled. By default it won’t be loaded by any page.
On page “Physics” you coded some JavaScript for a dynamic formulae. You can set the MathJax parameters locally to load mathJax on this page.
You also can disable MathJax for specific pages while globally enabled.
Mermaid The Mermaid configuration parameters can also be set on a specific page. In this case, the global parameter would be overwritten by the local one. See Mermaid for additional documentation.
Example Mermaid is globally disabled. By default it won’t be loaded by any page.
On page “Architecture” you coded some JavaScript to dynamically generate a class diagram. You can set the Mermaid parameters locally to load mermaid on this page.
You also can disable Mermaid for specific pages while globally enabled.
Home Button Configuration If the disableLandingPageButton option is set to false, a Home button will appear on the left menu. It is an alternative for clicking on the logo. To edit the appearance, you will have to configure two parameters for the defined languages:
[languages] [languages.en] ... [languages.en.params] landingPageName = "<i class='fas fa-home'></i> Home" ... [languages.pir] ... [languages.pir.params] landingPageName = "<i class='fas fa-home'></i> Arrr! Homme" ...If those params are not configured for a specific language, they will get their default values:
landingPageName = "<i class='fas fa-home'></i> Home"The home button is going to look like this:
`,description:"",tags:["config"],title:"Configuration",uri:"/_basics/configuration/index.html"},{breadcrumb:"Shortcodes > Children",content:`This is a demo child page with no description.
So its content is used as description.
`,description:"",tags:["children","non-hidden"],title:"page 2",uri:"/_shortcodes/children/children-2/index.html"},{breadcrumb:"Basics",content:`The Relearn theme has been built to be as configurable as possible by defining multiple partials
In themes/hugo-theme-relearn/layouts/partials/, you will find all the partials defined for this theme. If you need to overwrite something, don’t change the code directly. Instead follow this page. You’d create a new partial in the layouts/partials folder of your local project. This partial will have the priority.
This theme defines the following partials :
header.html: the header of the page. See output-formats footer.html: the footer of the page. See output-formats body.html: the body of the page. The body may contain of one or many articles. See output-formats article.html: the output for a single article, can contain elements around your content. See output-formats menu.html: left menu. Not meant to be overwritten search.html: search box. Not meant to be overwritten custom-header.html: custom headers in page. Meant to be overwritten when adding CSS imports. Don’t forget to include style HTML tag directive in your file. custom-footer.html: custom footer in page. Meant to be overwritten when adding JavaScript. Don’t forget to include javascript HTML tag directive in your file. favicon.html: the favicon heading-pre.html: side-wide configuration to prepend to pages title headings. If you override this, it is your responsibility to take the page’s headingPre setting into account. heading-post.html: side-wide configuration to append to pages title headings. If you override this, it is your responsibility to take the page’s headingPost setting into account. logo.html: the logo, on top left hand corner meta.html: HTML meta tags, if you want to change default behavior menu-pre.html: side-wide configuration to prepend to menu items. If you override this, it is your responsibility to take the page’s menuPre setting into account. menu-post.html: side-wide configuration to append to menu items. If you override this, it is your responsibility to take the page’s menuPost setting into account. menu-footer.html: footer of the the left menu toc.html: table of contents content.html: the content page itself. This can be overridden if you want to display page’s meta data above or below the content. content-header.html: header above the title, has a default implementation but you can overwrite it if you don’t like it. content-footer.html: footer below the content, has a default implementation but you can overwrite it if you don’t like it. Change the Logo Create a new file in layouts/partials/ named logo.html. Then write any HTML you want. You could use an img HTML tag and reference an image created under the static folder, or you could paste a SVG definition!
Note The size of the logo will adapt automatically
Change the Favicon If your favicon is a SVG, PNG or ICO, just drop off your image in your local static/images/ folder and name it favicon.svg, favicon.png or favicon.ico respectively.
Additionally, if you want your site to use light & dark theme favicons that follow the OS’ (and in some cases, the browser’s) color scheme, add the image files to your local static/images/ folder and name them eg. favicon-light.svg and/or favicon-dark.svg respectively corresponding to your file format. In case one of the files is missing, the theme falls back to eg. favicon.svg for the missing file. All supplied favicons must be of the same file format.
Warning IE and old browser versions do not support media queries, which are necessary for the light & dark theme favicon option. If you have requirements to support IE and/or older browser versions, use one of the other options.
If no favicon file is found, the theme will lookup the alternative filename logo in the same location and will repeat the search for the list of supported file types.
If you need to change this default behavior, create a new file in layouts/partials/ named favicon.html. Then write something like this:
<link rel="icon" href="/images/favicon.bmp" type="image/bmp">Change the Menu Width The menu width adjusts automatically for different screen sizes.
Name Screen Width Menu Width S < 48rem 0 M 48rem - 60rem 14.375rem L >= 60rem 18.75rem The values for the screen width breakpoints aren’t configurable.
If you want to adjust the menu width you can define the following CSS variables in your custom-header.html. Note that --MENU-WIDTH-S doesn’t exist as the menu is always hidden for small screen sizes.
:root { --MENU-WIDTH-M: 14.375rem; --MENU-WIDTH-L: 18.75rem; }Change the Colors The Relearn theme lets you choose between some predefined color variants in light or dark mode, but feel free to add one yourself!
You can preview the shipped variants by changing them in the variant selector at the bottom of the menu.
Single Variant Set the themeVariant value with the name of your theme file. That’s it!
[params] themeVariant = "relearn-light"In the above example your theme file has to be named theme-relearn-light.css
Multiple Variants You can also set multiple variants. In this case, the first variant is the default chosen on first view and a variant switch will be shown in the menu footer.
[params] # Change default color scheme with a variant one. themeVariant = [ "relearn-light", "relearn-dark" ] Tip If you want to switch the syntax highlighting theme together with your color variant, generate a syntax highlighting stylesheet and configure your installation according to Hugo’s documentation, and @import this stylesheet in your color variant stylesheet. For an example, take a look into theme-relearn-light.css and config.toml of the exampleSite.
Adjust to OS Settings You can also cause the site to adjust to your OS settings for light/dark mode. Just set the themeVariant to auto. That’s it.
If you’ve set multiple variants, you can drop auto at any position, but usually it makes sense to set it in the first position and make it the default.
[params] themeVariant = [ "auto", "red" ]If you don’t configure anything else, the theme will use relearn-light for light mode and relearn-dark for dark mode.
If you don’t like that, you can set themeVariantAuto. The first element is the variant for light mode, the second for dark mode
[params] themeVariantAuto = [ "learn", "neon" ] Note This is not supported for Internet Explorer 11, which still displays in the relearn-light variant.
JavaScript Once a variant is fully loaded, either initially or by switching the variant manually with the variant selector, the custom event themeVariantLoaded on the document will be dispatched. You can add an event listener and react to changes.
document.addEventListener( 'themeVariantLoaded', function( e ){ console.log( e.detail.variant ); // \`relearn-light\` });Roll your Own If you are not happy with the shipped variants you can either copy and rename one of the shipped files from themes/hugo-theme-relearn/static/css to static/css, edit them afterwards to your liking in a text editor and configure the themeVariant parameter in your config.toml or just use the interactive variant generator.
Output Formats Certain parts of the theme can be changed for support of your own output formats. Eg. if you define a new output format PLAINTEXT in your config.toml, you can add a file layouts/partials/header.plaintext.html to change the way, the page header should look like for that output format.
`,description:"",tags:null,title:"Customization",uri:"/_basics/customization/index.html"},{breadcrumb:"Basics",content:`This interactive tool may help you to generate your own color variant stylesheet.
Show usage instructions To get started, first select a color variant from the variant switch in the lower left sidebar that fits you best as a starting point.
The graph is interactive and reflect the current colors. You can click on any of the colored boxes to adjust the respective color. The graph and the page will update accordingly.
The arrowed lines reflect how colors are inherited thru different parts of the theme if the descendent isn’t overwritten. If you want to delete a color and let it inherit from its parent, just delete the value from the input field.
To better understand this select the neon variant and modify the different heading colors. There, colors for the heading h2, h3 and h4 are explicitly set. h5 is not set and inherits its value from h4. h6 is also not set and inherits its value from h5.
Once you’ve changed a color, the variant switch will show a “My custom variant” entry and your changes are stored in the browser. You can browse to other pages and even close the browser without losing your changes.
Once you are satisfied, you can download the new variants file and copy it into your site’s static/css directory. Afterwards you have to adjust the themeVariant parameter in your config.toml to your chosen file name.
Eg. if your new variants file is named theme-my-custom-variant.css, you have to set themeVariant='my-custom-variant' to use it.
Download variant Reset variant Graph Download variant Reset variant `,description:"",tags:null,title:"Stylesheet generator",uri:"/_basics/generator/index.html"},{breadcrumb:"Basics",content:`The theme comes with a reasonably configured topbar.
Nevertheless, your requirements may differ from this configuration. Luckily the theme got you covered as the themebar, its buttons and the functionality behind these buttons is fully configurable by you.
Tip All mentioned file names below can be clicked and show you the implementation for a better understanding.
Areas The default configuration comes with three predefined areas that may contain an arbitrary set of buttons.
start: shown between menu and breadcrumb end: shown on the opposite breadcrumb side in comparison to the start area more: shown when pressing the more button in the topbar While you can not add additional areas in the topbar, you are free to configure addtional buttons that behave like the more button, providing further user defined areas.
Buttons The theme ships with the following predefined buttons (from left to right in the screenshot)
sidebar: opens the sidebar flyout if in mobile layout toc: opens the table of contents in an overlay edit: browses to the editable page if the editURL parameter is set print: browses to the chapters printable page if print support was activated prev: browses to the previous page if there is one next: browses to the next page if there is one more: opens the overlay for the more area Not all buttons are displayed at every given time. This is configurable (see below if interested).
Redefining Areas Each predefined area and button comes in their own file. By that it is easy for you to overwrite an area file in your installation reusing only the buttons you like.
Eg. you can redefine the predefined end area by adding the file layouts/partials/topbar/area/end.html in your installation (not in the theme itself) to remove all but the more button.
The below example sets an explicit value for the onempty parameter, overriding the specific default value for this button (these defaults vary depending on the button). The parameter causes the more button to always be displayed instead of hiding once its content is empty.
{{ partial "topbar/button/more.html" (dict "page" . "onempty" "disable" )}}Defining own Buttons Button Types The theme distingushies between two types of buttons:
button: a clickable button that either browses to another site, triggers a user defined script or opens an overlay containing user defined content area-button: the template for the more button, to define your own area overlay buttons Button Parameter Screen Widths and Actions Depending on the screen width you can configure how the button should behave. Screen width is divided into three classes:
s: (controlled by the onwidths parameter) mobile layout where the menu sidebar is hidden m: (controlled by the onwidthm parameter) desktop layout with visible sidebar while the content area width still resizes l: (controlled by the onwidthl parameter) desktop layout with visible sidebar once the content area reached its maximum width For each width class, you can configure one of the following actions:
show: the button is displayed in its given area hide: the button is removed area-XXX: the button is moved from its given area into the area XXX; eg. this is used to move buttons to the more area overlay in the mobile layout Hiding and Disabling Stuff While hiding a button dependend on the screen size can be configured with the above described hide action, you may want to hide the button on certain other conditions aswell.
For example, the print button in its default configuration should only be displayed if print support was configured. This is done in your button template by checking the conditions first before displaying the button (see layouts/partials/topbar/button/print.html).
Another prefered condition for hiding a button is, if the displayed overlay is empty. This is the case for the toc (see layouts/partials/topbar/button/toc.html) aswell as the more button (see layouts/partials/topbar/button/more.html) and controlled by the parameter onempty.
This parameter can have one of the following values:
disable: the button displayed in disabled state if the overlay is empty hide: the button is removed if the overlay is empty If you want to disable a button containing no overlay, this can be achieved by an empty href parameter. An example can be seen in the prev button (see layouts/partials/topbar/button/prev.html) where the URL for the previous site may be empty.
Reference Button Contains the basic button functionality and is used as a base implementation for all other buttons (layouts/partials/topbar/func/button.html).
Call this from your own button templates if you want to implement a button without an overlay like the print button (layouts/partials/topbar/button/print.html) or with an overlay containing arbitrary content like the toc button (layouts/partials/topbar/button/toc.html).
For displaying an area in the button’s overlay, see Area-Button.
Parameter Name Default Notes page <empty> Mandatory reference to the page. class <empty> Mandatory unique class name for this button. Displaying two buttons with the same value for class is undefined. href <empty> Either the destination URL for the button or JavaScript code to be executed on click.
- if starting with javascript: all following text will be executed in your browser
- every other string will be interpreted as URL
- if empty the button will be displayed in disabled state regardless of its content icon <empty> Mandatory Font Awesome icon name. onempty disable Defines what to do with the button if href is not empty but the content overlay is empty:
- disable: The button is displayed in disabled state.
- hide: The button is removed. onwidths show The action, that should be executed if the site is displayed in the given width:
- show: The button is displayed in its given area
- hide: The button is removed.
- area-XXX: The button is moved from its given area into the area XXX. onwidthm show See above. onwidthl show See above. title <empty> Arbitrary text for title, displayed in the tooltip. content <empty> Arbitrary HTML to put into the content overlay. This parameter may be empty. In this case no overlay will be generated. Area-Button Contains the basic functionality to display area overlay buttons (layouts/partials/topbar/func/area-button.html).
Call this from your own button templates if you want to implement a button with an area overlay like the more button (layouts/partials/topbar/button/more.html).
Parameter Name Default Notes page <empty> Mandatory reference to the page. area <empty> Mandatory unique area name for this area. Displaying two areas with the same value for area is undefined. icon <empty> Mandatory Font Awesome icon name. onempty disable Defines what to do with the button if the content overlay is empty:
- disable: The button is displayed in disabled state.
- hide: The button is removed. onwidths show The action, that should be executed if the site is displayed in the given width:
- show: The button is displayed in its given area
- hide: The button is removed.
- area-XXX: The button is moved from its given area into the area XXX. onwidthm show See above. onwidthl show See above. title <empty> Arbitrary text for title, displayed in the tooltip. Predefined Buttons The predefined buttons by the theme (all other buttons besides the more and toc button in layouts/partials/topbar/button).
Call these from your own redefined area templates if you want to use default button behavior.
The <varying> parameter values are different for each button and configured for standard behavior as seen on this page.
Parameter Name Default Notes page <empty> Mandatory reference to the page. onwidths <varying> The action, that should be executed if the site is displayed in the given width:
- show: The button is displayed in its given area
- hide: The button is removed.
- area-XXX: The button is moved from its given area into the area XXX. onwidthm <varying> See above. onwidthl <varying> See above. Predefined Overlay-Buttons The predefined buttons by the theme that open an overlay (the more and toc button in layouts/partials/topbar/button).
Call these from your own redefined area templates if you want to use default button behavior utilizing overlay functionality.
The <varying> parameter values are different for each button and configured for standard behavior as seen on this page.
Parameter Name Default Notes page <empty> Mandatory reference to the page. onempty disable Defines what to do with the button if the content overlay is empty:
- disable: The button is displayed in disabled state.
- hide: The button is removed. onwidths <varying> The action, that should be executed if the site is displayed in the given width:
- show: The button is displayed in its given area
- hide: The button is removed.
- area-XXX: The button is moved from its given area into the area XXX. onwidthm <varying> See above. onwidthl <varying> See above. `,description:"",tags:null,title:"Topbar Modification",uri:"/_basics/topbar/index.html"},{breadcrumb:"Basics",content:"",description:"",tags:null,title:"History",uri:"/_basics/history/index.html"},{breadcrumb:"Shortcodes > Children",content:`This is a demo child page.
Subpages of this page page 3-1 `,description:"This is a demo child page",tags:["children","non-hidden"],title:"page 3",uri:"/_shortcodes/children/children-3/index.html"},{breadcrumb:"Shortcodes > Children",content:`This is a hidden demo child page. This page and all its children are hidden in the menu, arrow navigation and children shortcode as long as you aren’t viewing this page or its children directly.
`,description:"This is a hidden demo child page",tags:["children","hidden"],title:"page 4 (hidden)",uri:"/_shortcodes/children/children-4/index.html"},{breadcrumb:"",content:`Selamat datang di catatan praktis saya!
`,description:"Deskripsi halaman beranda.",tags:null,title:"Blog",uri:"/posts/index.html"},{breadcrumb:"",content:"",description:"",tags:null,title:"Categories",uri:"/categories/index.html"},{breadcrumb:"",content:`Repo ini adalah private dengan 2 control flow gunakan CI/CD khas devops flow pertama untuk update dan otomatis merge ke PR dan flow kedua untuk merger semua perubahan pada main untuk semua cabang, sementara berisi catatan praktis semua profesi
subl -> View -> identation -> convert identation to space/tab jika ada error File "/Users/admin/Desktop/devops/konvert/convertany.py", line 36 elif para == "Autosimpan & Feedback Loop":`,description:"Ini adalah halaman depan situs saya.",tags:null,title:"Halaman Depan",uri:"/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: Hugo",uri:"/tags/hugo/index.html"},{breadcrumb:"Categories",content:"",description:"",tags:null,title:"Category :: Hugo",uri:"/categories/hugo/index.html"},{breadcrumb:"Blog",content:"",description:"Deskripsi singkat",tags:["Hugo","Tutorial"],title:"Judul Postingan",uri:"/posts/my-first-post/index.html"},{breadcrumb:"",content:"",description:"",tags:null,title:"Tags",uri:"/tags/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: tutorial",uri:"/tags/tutorial/index.html"},{breadcrumb:"Categories",content:"",description:"",tags:null,title:"Category :: Web Development",uri:"/categories/web-development/index.html"},{breadcrumb:"Shortcodes",content:`The attachments shortcode displays a list of files attached to a page with adjustable color, title and icon.
Attachments adivorciarsetoca00cape.pdf (361 KB) BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) hugo.png (17 KB) hugo.txt (20 B) movieselectricsheep-flock-244-32500-2.mp4 (340 KB) Warning Since Hugo 0.112.0 this only works for leaf bundles. Branch bundles and simple pages must be switched to leaf bundles or you are currently locked to a Hugo version < 0.112.0.
Usage While the examples are using shortcodes with named parameter you are free to also call this shortcode from your own partials.
​ shortcode partial {{% attachments sort="asc" /%}} {{ partial "shortcodes/attachments.html" (dict "page" . "sort" "asc" )}} Parameter Name Default Notes style transparent The style scheme used for the box.
- by severity: info, note, tip, warning
- by brand color: primary, secondary, accent
- by color: blue, green, grey, orange, red
- by special color: default, transparent, code color see notes The CSS color value to be used. If not set, the chosen color depends on the style. Any given value will overwrite the default.
- for severity styles: a nice matching color for the severity
- for all other styles: the corresponding color title see notes Arbitrary text for the box title. Depending on the style there may be a default title. Any given value will overwrite the default.
- for severity styles: the matching title for the severity
- for all other styles: Attachments
If you want no title for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) icon see notes Font Awesome icon name set to the left of the title. Depending on the style there may be a default icon. Any given value will overwrite the default.
- for severity styles: a nice matching icon for the severity
- for all other styles: paperclip
If you want no icon, you have to set this parameter to " " (a non empty d with spaces) sort asc Sorting the output in ascending or descending order. pattern .* A regular expressions, used to filter the attachments by file name. For example:
- to match a file suffix of ‘jpg’, use .*\\.jpg (not *.\\.jpg)
- to match file names ending in jpg or png, use .*\\.(jpg|png) Setup Single language The shortcode lists files found in a specific folder. The name of the folder depends on your page type (either branch bundle, leaf bundle or page).
If your page is a leaf bundle, attachments must be placed in a nested index.files folder, accordingly.
content _index.md page _index.md _index.files attachment.pdf If your page is a branch bundle, attachments must be placed in a nested _index.files folder, accordingly.
Warning This is only available for Hugo < 0.112.0
content _index.md page index.md index.files attachment.pdf For simple pages, attachments must be placed in a folder named like your page and ending with .files.
Warning This is only available for Hugo < 0.112.0
content _index.md page.files attachment.pdf page.md Multilingual Be aware that if you use a multilingual website, you will need to have as many folders as languages and the language code must be part of the folder name.
Eg. for a site in English and Piratish:
content index.en.md index.pir.md page index.en.md index.pir.md index.en.files attachment.pdf index.pir.files attachment.pdf Examples Custom Title, List of Attachments Ending in pdf or mp4 {{% attachments title="Related **files**" pattern=".*\\.(pdf|mp4)" /%}} Related files adivorciarsetoca00cape.pdf (361 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) movieselectricsheep-flock-244-32500-2.mp4 (340 KB) Info Styled Box, Descending Sort Order {{% attachments style="info" sort="desc" /%}} Info movieselectricsheep-flock-244-32500-2.mp4 (340 KB) hugo.txt (20 B) hugo.png (17 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) BachGavotteShort.mp3 (357 KB) adivorciarsetoca00cape.pdf (361 KB) With User-Defined Color and Font Awesome Brand Icon {{% attachments color="fuchsia" icon="fab fa-hackerrank" /%}} Attachments adivorciarsetoca00cape.pdf (361 KB) BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) hugo.png (17 KB) hugo.txt (20 B) movieselectricsheep-flock-244-32500-2.mp4 (340 KB) Style, Color, Title and Icons For further examples for style, color, title and icon, see the notice shortcode documentation. The parameter are working the same way for both shortcodes, besides having different defaults.
`,description:"List of files attached to a page",tags:null,title:"Attachments",uri:"/_shortcodes/attachments/index.html"},{breadcrumb:"Shortcodes",content:`The badge shortcode displays little markers in your text with adjustable color, title and icon.
Important Version6.6.6 Captain InfoNew Awesome
Usage While the examples are using shortcodes with named parameter you are free to also call this shortcode from your own partials.
​ shortcode partial {{% badge %}}Important{{% /badge %}} {{% badge style="primary" title="Version" %}}6.6.6{{% /badge %}} {{% badge style="red" icon="angle-double-up" %}}Captain{{% /badge %}} {{% badge style="info" %}}New{{% /badge %}} {{% badge color="fuchsia" icon="fab fa-hackerrank" %}}Awesome{{% /badge %}} {{ partial "shortcodes/badge.html" (dict "page" . "content" "Important" )}} {{ partial "shortcodes/badge.html" (dict "page" . "style" "primary" "title" "Version" "content" "6.6.6" )}} {{ partial "shortcodes/badge.html" (dict "page" . "style" "red" "icon" "angle-double-up" "content" "Captain" )}} {{ partial "shortcodes/badge.html" (dict "page" . "style" "info" "content" "New" )}} {{ partial "shortcodes/badge.html" (dict "page" . "color" "fuchsia" "icon" "fab fa-hackerrank" "content" "Awesome" )}} Parameter Name Default Notes style default The style scheme used for the badge.
- by severity: info, note, tip, warning
- by brand color: primary, secondary, accent
- by color: blue, green, grey, orange, red
- by special color: default, transparent, code color see notes The CSS color value to be used. If not set, the chosen color depends on the style. Any given value will overwrite the default.
- for severity styles: a nice matching color for the severity
- for all other styles: the corresponding color title see notes Arbitrary text for the badge title. Depending on the style there may be a default title. Any given value will overwrite the default.
- for severity styles: the matching title for the severity
- for all other styles: <empty>
If you want no title for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) icon see notes Font Awesome icon name set to the left of the title. Depending on the style there may be a default icon. Any given value will overwrite the default.
- for severity styles: a nice matching icon for the severity
- for all other styles: <empty>
If you want no icon for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) <content> <empty> Arbitrary text for the badge. Examples Style By Severity {{% badge style="info" %}}New{{% /badge %}} {{% badge style="note" %}}Change{{% /badge %}} {{% badge style="tip" %}}Optional{{% /badge %}} {{% badge style="warning" %}}Breaking{{% /badge %}} InfoNew NoteChange TipOptional WarningBreaking
By Brand Colors {{% badge style="primary" icon="bullhorn" title="Announcement" %}}Mandatory{{% /badge %}} {{% badge style="secondary" icon="bullhorn" title="Announcement" %}}Optional{{% /badge %}} {{% badge style="accent" icon="bullhorn" title="Announcement" %}}Special{{% /badge %}} AnnouncementMandatory AnnouncementOptional AnnouncementSpecial
By Color {{% badge style="blue" icon="palette" title="Color" %}}Blue{{% /badge %}} {{% badge style="green" icon="palette" title="Color" %}}Green{{% /badge %}} {{% badge style="grey" icon="palette" title="Color" %}}Grey{{% /badge %}} {{% badge style="orange" icon="palette" title="Color" %}}Orange{{% /badge %}} {{% badge style="red" icon="palette" title="Color" %}}Red{{% /badge %}} ColorBlue ColorGreen ColorGrey ColorOrange ColorRed
By Special Color {{% badge style="default" icon="palette" title="Color" %}}Default{{% /badge %}} {{% badge style="transparent" icon="palette" title="Color" %}}Transparent{{% /badge %}} ColorDefault ColorTransparent
Variants Without Icon and Title Text {{% badge %}}6.6.6{{% /badge %}} {{% badge style="info" icon=" " title=" " %}}Awesome{{% /badge %}} {{% badge style="red" %}}Captain{{% /badge %}}6.6.6 Awesome Captain
Without Icon {{% badge title="Version" %}}6.6.6{{% /badge %}} {{% badge style="info" icon=" " %}}Awesome{{% /badge %}} {{% badge style="red" title="Rank" %}}Captain{{% /badge %}}Version6.6.6 InfoAwesome RankCaptain
Without Title Text {{% badge icon="star" %}}6.6.6{{% /badge %}} {{% badge style="info" title=" " %}}Awesome{{% /badge %}} {{% badge style="red" icon="angle-double-up" %}}Captain{{% /badge %}}6.6.6 Awesome Captain
All Set {{% badge icon="star" title="Version" %}}6.6.6{{% /badge %}} {{% badge style="info" %}}Awesome{{% /badge %}} {{% badge style="red" icon="angle-double-up" title="Rank" %}}Captain{{% /badge %}} Version6.6.6 InfoAwesome RankCaptain
Override for Severity {{% badge style="info" icon="rocket" title="Feature" %}}Awesome{{% /badge %}} FeatureAwesome Other With User-Defined Color, Font Awesome Brand Icon and Markdown Title and Content {{% badge color="fuchsia" icon="fab fa-hackerrank" title="**Font**" %}}**Awesome**{{% /badge %}} FontAwesome With Icon Content You can combine the badge with the icon shortcode to create even more stunning visuals.
In this case you need to declare {{< badge >}} instead of {{% badge %}}. Note, that in this case it is not possible to put markdown in the content.
{{< badge style="primary" icon="angle-double-up" >}}{{% icon skull-crossbones %}}{{< /badge >}} {{< badge style="primary" icon="angle-double-up" >}}{{% icon skull-crossbones %}} Pirate{{< /badge >}} {{< badge style="primary" title="Rank" >}}{{% icon skull-crossbones %}}{{< /badge >}} {{< badge style="primary" title="Rank" >}}{{% icon skull-crossbones %}} Pirate{{< /badge >}} {{< badge style="primary" icon="angle-double-up" title="Rank" >}}{{% icon skull-crossbones %}}{{< /badge >}} {{< badge style="primary" icon="angle-double-up" title="Rank" >}}{{% icon skull-crossbones %}} Pirate{{< /badge >}}
Pirate
Rank
Rank Pirate
Rank
Rank Pirate
Inside of Text Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. {{% badge style="blue" icon="rocket" %}}Awesome{{% /badge %}} Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Awesome Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.
`,description:"Marker badges to display in your text",tags:null,title:"Badge",uri:"/_shortcodes/badge/index.html"},{breadcrumb:"Categories",content:"",description:"",tags:null,title:"Category :: basic",uri:"/categories/basic/index.html"},{breadcrumb:"Basics",content:"",description:"",tags:null,title:"Basics",uri:"/_basics/content/index.html"},{breadcrumb:"Shortcodes",content:`The button shortcode displays a clickable button with adjustable color, title and icon.
Get Hugo Get Hugo Usage While the examples are using shortcodes with named parameter you are free to also call this shortcode from your own partials.
​ shortcode partial {{% button href="https://gohugo.io/" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="warning" icon="dragon" %}}Get Hugo{{% /button %}} {{ partial "shortcodes/button.html" (dict "page" . "href" "https://gohugo.io/" "content" "Get Hugo" )}} {{ partial "shortcodes/button.html" (dict "page" . "href" "https://gohugo.io/" "style" "warning" "icon" "dragon" "content" "Get Hugo" )}} Once the button is clicked, it opens another browser tab for the given URL.
Parameter Name Default Notes href <empty> Either the destination URL for the button or JavaScript code to be executed on click. If this parameter is not set, the button will do nothing but is still displayed as clickable.
- if starting with javascript: all following text will be executed in your browser
- every other string will be interpreted as URL style transparent The style scheme used for the button.
- by severity: info, note, tip, warning
- by brand color: primary, secondary, accent
- by color: blue, green, grey, orange, red
- by special color: default, transparent, code color see notes The CSS color value to be used. If not set, the chosen color depends on the style. Any given value will overwrite the default.
- for severity styles: a nice matching color for the severity
- for all other styles: the corresponding color icon see notes Font Awesome icon name set to the left of the title. Depending on the style there may be a default icon. Any given value will overwrite the default.
- for severity styles: a nice matching icon for the severity
- for all other styles: <empty>
If you want no icon for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) iconposition left Places the icon to the left or right of the title. target see notes The destination frame/window if href is an URL. Otherwise the parameter is not used. This behaves similar to normal links. If the parameter is not given it defaults to:
- the setting of externalLinkTarget or _blank if not set, for any address starting with http:// or https://
- no specific value for all other links type see notes The button type if href is JavaScript. Otherwise the parameter is not used. If the parameter is not given it defaults to button <content> see notes Arbitrary text for the button title. Depending on the style there may be a default title. Any given value will overwrite the default.
- for severity styles: the matching title for the severity
- for all other styles: <empty>
If you want no title for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) Examples Style By Severity {{% button href="https://gohugo.io/" style="info" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="note" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="tip" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="warning" %}}Get Hugo{{% /button %}} Get Hugo Get Hugo Get Hugo Get Hugo By Brand Colors {{% button href="https://gohugo.io/" style="primary" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="secondary" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="accent" %}}Get Hugo{{% /button %}} Get Hugo Get Hugo Get Hugo By Color {{% button href="https://gohugo.io/" style="blue" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="green" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="grey" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="orange" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="red" %}}Get Hugo{{% /button %}} Get Hugo Get Hugo Get Hugo Get Hugo Get Hugo By Special Color {{% button href="https://gohugo.io/" style="default" %}}Get Hugo{{% /button %}} {{% button href="https://gohugo.io/" style="transparent" %}}Get Hugo{{% /button %}} Get Hugo Get Hugo Icon Empty {{% button href="https://gohugo.io/" icon=" " %}}{{% /button %}} Only {{% button href="https://gohugo.io/" icon="download" %}}{{% /button %}} To the Left {{% button href="https://gohugo.io/" icon="download" %}}Get Hugo{{% /button %}} Get Hugo To the Right {{% button href="https://gohugo.io/" icon="download" iconposition="right" %}}Get Hugo{{% /button %}} Get Hugo Override for Severity {{% button href="https://gohugo.io/" icon="dragon" style="warning" %}}Get Hugo{{% /button %}} Get Hugo Target {{% button href="https://gohugo.io/" target="_self" %}}Get Hugo in same window{{% /button %}} {{% button href="https://gohugo.io/" %}}Get Hugo in new Window/Frame (default){{% /button %}} Get Hugo in same Window/Frame Get Hugo in new Window/Frame (default) Other With User-Defined Color, Font Awesome Brand Icon and Markdown Title {{% button href="https://gohugo.io/" color="fuchsia" icon="fab fa-hackerrank" %}}Get **Hugo**{{% /button %}} Get Hugo Severity Style with All Defaults {{% button href="https://gohugo.io/" style="tip" %}}{{% /button %}} Tip Button to Internal Page {{% button href="/index.html" %}}Home{{% /button %}} Home Button with JavaScript Action If your JavaScript action does not change the focus afterwards, make sure to call this.blur() in the end to unselect the button.
{{% button style="primary" icon="bullhorn" href="javascript:alert('Hello world!');this.blur();" %}}Shout it out{{% /button %}} Shout it out Button within a form Element To use native HTML elements in your Markdown, add this in your config.toml
[markup.goldmark.renderer] unsafe = true<form action="../../search.html" method="get"> <input name="search-by-detail" class="search-by" type="search"> {{% button type="submit" style="secondary" icon="search" %}}Search{{% /button %}} </form> Search `,description:"Clickable buttons",tags:null,title:"Button",uri:"/_shortcodes/button/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: Children",uri:"/tags/children/index.html"},{breadcrumb:"Shortcodes",content:`The children shortcode lists the child pages of the current page and its descendants.
page X page 1 page 2 page 3 Usage While the examples are using shortcodes with named parameter you are free to also call this shortcode from your own partials.
​ shortcode partial {{% children sort="weight" %}} {{ partial "shortcodes/children.html" (dict "page" . "sort" "weight" )}} Parameter Name Default Notes containerstyle ul Choose the style used to group all children. It could be any HTML tag name. style li Choose the style used to display each descendant. It could be any HTML tag name. showhidden false When true, child pages hidden from the menu will be displayed as well. description false When true shows a short text under each page in the list. When no description or summary exists for the page, the first 70 words of the content is taken - read more info about summaries on gohugo.io. depth 1 The depth of descendants to display. For example, if the value is 2, the shortcode will display two levels of child pages. To get all descendants, set this value to a high number eg. 999. sort see notes The sort order of the displayed list.
If not set it is sorted by the ordersectionsby setting of the site and the pages frontmatter
- weight: to sort on menu order
- title: to sort alphabetically on menu label. Examples All Default {{% children %}} page X page 1 page 2 page 3 With Description {{% children description="true" %}} page XThis is a plain page test, and the beginning of a YAML multiline description... page 1This is a demo child page
page 2This is a demo child page with no description. So its content is used as description.
page 3This is a demo child page
Infinite Depth and Hidden Pages {{% children depth="999" showhidden="true" %}} page X page 1 page 1-1 page 1-1-1 (hidden) page 1-1-1-1 page 1-1-1-1-1 (hidden) page 1-1-1-1-1-1 page 1-1-2 (headless) page 1-1-2-1 page 1-1-2-2 page 1-1-3 page 2 page 3 page 3-1 page 4 (hidden) Heading Styles for Container and Elements {{% children containerstyle="div" style="h2" depth="3" description="true" %}} page XThis is a plain page test, and the beginning of a YAML multiline description... page 1This is a demo child page
page 1-1This is a demo child page
page 1-1-2 (headless)This is a demo child page
page 1-1-3This is a demo child page
page 2This is a demo child page with no description. So its content is used as description.
page 3This is a demo child page
page 3-1This is a plain page test nested in a parent
Divs for Group and Element Styles {{% children containerstyle="div" style="div" depth="3" %}} page X page 1 page 1-1 page 1-1-2 (headless) page 1-1-3 page 2 page 3 page 3-1 `,description:"List the child pages of a page",tags:null,title:"Children",uri:"/_shortcodes/children/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: config",uri:"/tags/config/index.html"},{breadcrumb:"Categories",content:"",description:"",tags:null,title:"Category :: content",uri:"/categories/content/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: Content",uri:"/tags/content/index.html"},{breadcrumb:"Development",content:`Code Quality A new release can happen at any time from the main branch of the GitHub project without further accknowledgment. This makes it necessary that, every pushed set of changesets into the main branch must be self-contained and correct, resulting in a releasable version.
Stay simple for the user by focusing on the mantra “convention over configuration”.
At installation the site should work reasonable without (m)any configuration.
Stay close to the Hugo way.
Don’t use npm or any preprocessing, our contributors may not be front-end developers.
Document new features in the exampleSite. This also contains entries to the What’s new page.
Don’t break existing features if you don’t have to.
Remove reported issue from the browser’s console.
Check for unnecessary whitespace and correct indention of your resulting HTML.
Be compatible to IE11, at least for main functionality, this means:
test in IE11 check caniuse.com don’t use JavaScript arrow functions don’t use JavaScript template literals don’t use other fancy JavaScript ES5/6 stuff Conventional Commits Write commit messages in the conventional commit format.
Following is an impomplete list of some of the used conventional commit types. Be creative.
Common Feature Structure Shortcodes build a11y favicon attachments browser archetypes search badge chore alias menu button docs generator history children shortcodes i18n scrollbar expand theme mobile nav icon print toc include rss clipboard math variant syntaxhighlight mermaid boxes notice openapi piratify siteparam tabs `,description:"What to know if you want to contribute",tags:null,title:"Contributing",uri:"/_dev/contributing/index.html"},{breadcrumb:"",content:`Contributors Special thanks to everyone who has contributed to this project.
Many thanks to Mathieu Cornic for his work on porting the Learn theme to Hugo.
Many thanks to Andy Miller for initially creating the Learn theme for Grav.
Theme Dependencies autoComplete - A lightweight and powerful vanilla JavaScript completion suggester clipboard.js - A modern approach to copy text to clipboard d3-zoom - Pan and zoom SVG, HTML or Canvas using mouse or touch input - plus dependencies d3-color - Color spaces! RGB, HSL, Cubehelix, CIELAB, and more d3-dispatch - Register named callbacks and call them with arguments d3-ease - Easing functions for smooth animation d3-interpolate - Interpolate numbers, colors, strings, arrays, objects, whatever d3-selection - Transform the DOM by selecting elements and joining to data d3-timer - An efficient queue for managing thousands of concurrent animations d3-transition - Animated transitions for D3 selections d3-drag - Drag and drop SVG, HTML or Canvas using mouse or touch input Font Awesome - The internet’s icon library and toolkit js-yaml - JavaScript YAML parser and dumper Lunr - Enables a great search experience without the need for external, server-side, search services Lunr Languages - A collection of languages stemmers and stopwords for Lunr Javascript library MathJax - Beautiful math and chemical formulae in all browsers Mermaid - Generation of diagram and flowchart from text in a similar manner as markdown Perfect Scrollbar - A minimalistic but perfect custom scrollbar plugin SwaggerUI - Generate beautiful documentation from a Swagger-compliant API WorkSans - Work Sans is a 9 weight typeface family based loosely on early Grotesques Docs Dependencies github-buttons - Unofficial github:buttons Tooling Dependencies GitHub - Continuous deployment, testing and hosting of this project’s sources and its documentation Various GitHub Actions https://github.com/actions/setup-node https://github.com/Akkjon/close-milestone https://github.com/andstor/file-reader-action https://github.com/ashley-taylor/regex-property-action https://github.com/Kaven-Universe/github-action-current-date-time https://github.com/mingjun97/file-regex-replace https://github.com/octokit/graphql-action https://github.com/peaceiris/actions-gh-pages https://github.com/peaceiris/actions-hugo https://github.com/WyriHaximus/github-action-create-milestone https://github.com/WyriHaximus/github-action-next-semvers gren - A releasenotes generator for GitHub Hugo - The static site generator of your choice `,description:"",tags:null,title:"Credits",uri:"/_more/credits/index.html"},{breadcrumb:"Categories",content:"",description:"",tags:null,title:"Category :: custom",uri:"/categories/custom/index.html"},{breadcrumb:"",content:"",description:"",tags:null,title:"Devops",uri:"/devops/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: documentation",uri:"/tags/documentation/index.html"},{breadcrumb:"Shortcodes",content:`The expand shortcode displays an expandable/collapsible section of text.
Expand me… Thank you!
That’s some text with a footnote1
That’s some more text with a footnote.2
And that’s the footnote. ↩︎
Anything of interest goes here.
Blue light glows blue. ↩︎
Note This only works in modern browsers flawlessly. While Internet Explorer 11 has issues in displaying it, the functionality still works.
Usage While the examples are using shortcodes with named parameter you are free to use positional as well or also call this shortcode from your own partials.
​ shortcode shortcode (positional) partial {{% expand title="Expand me..." %}}Thank you!{{% /expand %}} {{% expand "Expand me..." %}}Thank you!{{% /expand %}} {{ partial "shortcodes/expand.html" (dict "page" . "title" "Expand me..." "content" "Thank you!" )}} Parameter Name Position Default Notes title 1 "Expand me..." Arbitrary text to appear next to the expand/collapse icon. open 2 false When true the content text will be initially shown as expanded. <content> <empty> Arbitrary text to be displayed on expand. Examples All Defaults {{% expand %}}Yes, you did it!{{% /expand %}} Expand me… Yes, you did it! Initially Expanded {{% expand title="Expand me..." open="true" %}}No need to press you!{{% /expand %}} Expand me… No need to press you! Arbitrary Text {{% expand title="Show me almost **endless** possibilities" %}} You can add standard markdown syntax: - multiple paragraphs - bullet point lists - _emphasized_, **bold** and even **_bold emphasized_** text - [links](https://example.com) - etc. \`\`\`plaintext ...and even source code \`\`\` > the possibilities are endless (almost - including other shortcodes may or may not work) {{% /expand %}} Show me almost endless possibilities You can add standard markdown syntax:
multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links etc. ...and even source code the possibilities are endless (almost - including other shortcodes may or may not work)
`,description:"Expandable/collapsible sections of text",tags:null,title:"Expand",uri:"/_shortcodes/expand/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: headless",uri:"/tags/headless/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: hidden",uri:"/tags/hidden/index.html"},{breadcrumb:"Shortcodes",content:'The highlight shortcode renders your code with a syntax highlighter.\n​ python 1print("Hello World!") Usage This shortcode is fully compatible with Hugo’s highlight shortcode but offers some extensions.\nIt is called interchangeably in the same way as Hugo’s own shortcode providing positional parameter or by simply using codefences.\nYou are free to also call this shortcode from your own partials. In this case it resembles Hugo’s highlight function syntax if you call this shortcode as a partial using compatiblity syntax.\nWhile the examples are using shortcodes with named parameter it is recommended to use codefences instead. This is because more and more other software supports codefences (eg. GitHub) and so your markdown becomes more portable.\n​ codefence shortcode shortcode (positional) partial partial (compat) ```py { lineNos="true" wrap="true" title="python" } print("Hello World!") ``` {{< highlight lineNos="true" type="py" wrap="true" title="python" >}} print("Hello World!") {{< /highlight >}} {{< highlight py "lineNos=true,wrap=true,title=python" >}} print("Hello World!") {{< /highlight >}} {{ partial "shortcodes/highlight.html" (dict "page" . "content" "print(\\"Hello World!\\")" "lineNos" "true" "type" "py" "wrap" "true" "title" "python" )}} {{ partial "shortcodes/highlight.html" (dict "page" . "content" "print(\\"Hello World!\\")" "options" "lineNos=true,wrap=true,title=python" "type" "py" )}} Parameter Name Default Notes type <empty> The language of the code to highlight. Choose from one of the supported languages. Case-insensitive. title <empty> Extension. Arbitrary title for code. This displays the code like a single tab if hl_inline=false (which is Hugos default). wrap see notes Extension. When true the content may wrap on long lines otherwise it will be scrollable.\nThe default value can be set in your config.toml and overwritten via frontmatter. See below. options <empty> An optional, comma-separated list of zero or more Hugo supported options as well as extension parameter from this table. <option> <empty> Any of Hugo’s supported options. <content> <empty> Your code to highlight. Configuration Default values for Hugo’s supported options can be set via goldmark settings in your config.toml\nDefault values for extension options can be set via params settings in your config.toml or be overwritten by frontmatter for each individual page.\nGlobal Configuration File Recommended Settings [markup] [markup.highlight] # line numbers in a table layout will shift if code is wrapping, so better # use inline; besides that visually both layouts have the same look and behavior lineNumbersInTable = false # if `guessSyntax = true`, there will be no unstyled code even if no language # was given BUT Mermaid and Math codefences will not work anymore! So this is a # mandatory setting for your site if you want to use Mermaid or Math codefences guessSyntax = false # the shipped variants come with their own modified chroma syntax highlightning # style which is imported in theme-relearn-light.css, theme-relearn-dark.css, etc.; # if you want to use a predefined style instead: # - remove `noClasses` or set `noClasses = true` # - set `style` to a predefined style name noClasses = false # style = "tango"Optional Settings [params] highlightWrap = truePage’s Frontmatter +++ highlightWrap = true +++Examples Line Numbers with Starting Offset As mentioned above, line numbers in a table layout will shift if code is wrapping, so better use inline. To make things easier for you, set lineNumbersInTable = false in your config.toml and add lineNos = true when calling the shortcode instead of the specific values table or inline.\n{{< highlight lineNos="true" lineNoStart="666" type="py" >}} # the hardest part is to start writing code; here\'s a kickstart; just copy and paste this; it\'s free; the next lines will cost you serious credits print("Hello") print(" ") print("World") print("!") {{< /highlight >}}666# the hardest part is to start writing code; here\'s a kickstart; just copy and paste this; it\'s free; the next lines will cost you serious credits 667print("Hello") 668print(" ") 669print("World") 670print("!") Codefence with Title ```py { title="python" } # a bit shorter print("Hello World!") ``` ​ python # a bit shorter print("Hello World!") With Wrap {{< highlight type="py" wrap="true" hl_lines="2" >}} # Quicksort Python One-liner lambda L: [] if L==[] else qsort([x for x in L[1:] if x< L[0]]) + L[0:1] + qsort([x for x in L[1:] if x>=L[0]]) # Some more stuff {{< /highlight >}}# Quicksort Python One-liner lambda L: [] if L==[] else qsort([x for x in L[1:] if x< L[0]]) + L[0:1] + qsort([x for x in L[1:] if x>=L[0]]) # Some more stuff Without Wrap {{< highlight type="py" wrap="false" hl_lines="2" >}} # Quicksort Python One-liner lambda L: [] if L==[] else qsort([x for x in L[1:] if x< L[0]]) + L[0:1] + qsort([x for x in L[1:] if x>=L[0]]) # Some more stuff {{< /highlight >}}# Quicksort Python One-liner lambda L: [] if L==[] else qsort([x for x in L[1:] if x< L[0]]) + L[0:1] + qsort([x for x in L[1:] if x>=L[0]]) # Some more stuff ',description:"Render code with a syntax highlighter",tags:null,title:"Highlight",uri:"/_shortcodes/highlight/index.html"},{breadcrumb:"Shortcodes",content:`The icon shortcode displays icons using the Font Awesome library.
Usage While the examples are using shortcodes with positional parameter you are free to also call this shortcode from your own partials.
​ shortcode shortcode (positional) partial {{% icon icon="exclamation-triangle" %}} {{% icon icon="angle-double-up" %}} {{% icon icon="skull-crossbones" %}} {{% icon exclamation-triangle %}} {{% icon angle-double-up %}} {{% icon skull-crossbones %}} {{ partial "shortcodes/icon.html" (dict "page" . "icon" "exclamation-triangle" )}} {{ partial "shortcodes/icon.html" (dict "page" . "icon" "angle-double-up" )}} {{ partial "shortcodes/icon.html" (dict "page" . "icon" "skull-crossbones" )}} Parameter Name Position Default Notes icon 1 <empty> Font Awesome icon name to be displayed. It will be displayed in the text color of its according context. Finding an icon Browse through the available icons in the Font Awesome Gallery. Notice that the free filter is enabled, as only the free icons are available by default.
Once on the Font Awesome page for a specific icon, for example the page for the heart, copy the icon name and paste into the Markdown content.
Customising Icons Font Awesome provides many ways to modify the icon
Change color (by default the icon will inherit the parent color) Increase or decrease size Rotate Combine with other icons Check the full documentation on web fonts with CSS for more.
Examples Standard Usage Built with {{% icon heart %}} by Relearn and HugoBuilt with by Relearn and Hugo
Advanced HTML Usage While the shortcode simplifies using standard icons, the icon customization and other advanced features of the Font Awesome library require you to use HTML directly. Paste the <i> HTML into markup, and Font Awesome will load the relevant icon.
Built with <i class="fas fa-heart"></i> by Relearn and HugoBuilt with by Relearn and Hugo
To use these native HTML elements in your Markdown, add this in your config.toml:
[markup.goldmark.renderer] unsafe = true`,description:"Nice icons for your page",tags:null,title:"Icon",uri:"/_shortcodes/icon/index.html"},{breadcrumb:"Shortcodes",content:`The include shortcode includes other files from your project inside of the current page.
Usage While the examples are using shortcodes with named parameter you are free to use positional aswell or also call this shortcode from your own partials.
​ shortcode shortcode (positional) partial {{% include file="shortcodes/INCLUDE_ME.md" %}} {{% include "shortcodes/INCLUDE_ME.md" %}} {{ partial "shortcodes/include .html" (dict "page" . "file" "shortcodes/INCLUDE_ME.md" )}} The included files can even contain Markdown and will be taken into account when generating the table of contents.
Parameter Name Position Default Notes file 1 <empty> The path to the file to be included. Path resolution adheres to Hugo’s build-in readFile function hidefirstheading 2 false When true and the included file contains headings, the first heading will be hidden. This comes in handy, eg. if you include otherwise standalone Markdown files. Examples Arbitrary Content {{% include "shortcodes/INCLUDE_ME.md" %}}`,description:"Displays content from other files",tags:null,title:"Include",uri:"/_shortcodes/include/index.html"},{breadcrumb:"Devops",content:"",description:"",tags:null,title:"Install on Linux",uri:"/devops/linux/index.html"},{breadcrumb:"Development",content:`Semver This project tries to follow the semver policy - although not followed 100% in the past.
Usually an entry of Breaking on the What’s new page causes a new major release number.
All other entries on the What’s new page will increase the minor release number.
Releases resulting in a new major or minor number are called main release.
Releases containing bugixes only, are only increasing the patch release number. Those releases don’t result in announcements on the What’s new page.
Entries on the What’s new page are checked and enforced during the version-release GitHub Action.
Managing Issues Issues are categorized and managed by assigning labels to it.
Once working on an issue, assign it to a fitting maintainer.
When done, close the ticket. Once an issue is closed, it needs to be assigned to next release milestone.
A once released ticket is not allowed to be reopened and rereleased in a different milestone. This would cause the changelog to be changed even for the milestone the issue was previously released in. Instead write a new ticket.
Managing Pull Requests If a PR is merged and closed it needs an accompanied issue assigned to. If there is no issue for a PR, the maintainer needs to create one.
You can assign multiple PRs to one issue as long as they belong together.
Usually set the same labels and milestone for the PR as for the accompanied issue.
Labels Kind An issue that results in changesets must have exactly one of the following labels. This needs to be assigned latest before release.
Label Description Changelog section documentation Improvements or additions to documentation - discussion This issue was converted to a discussion - task Maintainence work Maintenance feature New feature or request Features bug Something isn’t working Fixes Impact If the issue would cause a new main release due to semver semantics it needs one of the according labels and the matching badge on the What’s new page.
Label Description change Introduces changes with existing installations breaking Introduces breaking changes with existing installations Declination If an issue does not result in changesets but is closed anyways, it must have exactly one of the following labels.
Label Description duplicate This issue or pull request already exists invalid This doesn’t seem right unresolved No progress on this issue update A documented change in behaviour wontfix This will not be worked on Halt You can assign one further label out of the following list to signal readers that development on an open issue is currently halted for different reasons.
Label Description blocked Depends on other issue to be fixed first idea A valuable idea that’s currently not worked on undecided No decission was made yet helpwanted Great idea, send in a PR needsfeedback Further information is needed 3rd-Party If the issue is not caused by a programming error in the themes own code, you can label the causing program or library.
Label Description browser This is a topic related to the browser but not the theme device This is a topic related to a certain device hugo This is a topic related to Hugo itself but not the theme mermaid This is a topic related to Mermaid itself but not the theme Making Releases A release is based on a milestone named like the release itself - just the version number, eg: 1.2.3. It’s in the maintainers responsiblity to check semver semantics of the milestone’s name prior to release and change it if necessary.
Making releases is automated by the version-release GitHub Action. It requires the version number of the milestone that should be released. The release will be created from the main branch of the repository.
Treat released milestones as immutable. Don’t rerelease an already released milestone. An already released milestone may already been consumed by your users.
During execution of the action a few things are checked. If a check fails the action fails, resulting in no new release. You can correct the errors afterwards and rerun the action.
The following checks will be enforced
the milestone exists there is at least one closed issue assigned to the milestone all assigned issues for this milestone are closed if it’s a main release, there must be a new <major>.<minor> at the beginning of the What’s new page if it’s a patch release, there must be the <major>.<minor> from the previous release at the beginning of the What’s new page After a successful run of the action
the History page is updated, including release version, release date and text the What’s new page is updated, including release version, release date and text the version number for the <meta generator> is updated the updated files are commited the milestone is closed the repository is tagged with the version number (eg. 1.2.3), the main version number (eg. 1.2.x) and the major version number (eg. 1.x) a new entry in the GitHub release list with the according changelog will be created the official documentation is built and deployed the version number for the <meta generator> is updated to a temporary and commited (this helps to determine if users are running directly on the main branch or are using releases) a new milestone for the next patch release is created (this can later be renamed to a main release if necessary) `,description:"What to know as a maintainer",tags:null,title:"Maintaining",uri:"/_dev/maintaining/index.html"},{breadcrumb:"Shortcodes",content:'The math shortcode generates beautiful formatted math and chemical formulae using the MathJax library.\n$$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ Note This only works in modern browsers.\nUsage While the examples are using shortcodes with named parameter it is recommended to use codefences instead. This is because more and more other software supports Math codefences (eg. GitHub) and so your markdown becomes more portable.\nYou are free to also call this shortcode from your own partials.\nNote To use codefence syntax you have to turn off guessSyntax for the markup.highlight setting (see the configuration section).\n​ codefence shortcode partial ```math { align="center" } $$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ ``` {{< math align="center" >}} $$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ {{< /math >}} {{ partial "shortcodes/math.html" (dict "page" . "content" "$$left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$" "align" "center" )}} Parameter Name Default Notes align center Allowed values are left, center or right. <content> <empty> Your formuale. Configuration MathJax is configured with default settings. You can customize MathJax’s default settings for all of your files thru a JSON object in your config.toml or override these settings per page thru your pages frontmatter.\nThe JSON object of your config.toml / frontmatter is forwarded into MathJax’s configuration object.\nSee MathJax documentation for all allowed settings.\nNote To use codefence syntax you have to turn off guessSyntax for the markup.highlight setting.\nGlobal Configuration File [params] mathJaxInitialize = "{ \\"chtml\\": { \\"displayAlign\\": \\"left\\" } }" [markup] [markup.highlight] # if `guessSyntax = true`, there will be no unstyled code even if no language # was given BUT Mermaid and Math codefences will not work anymore! So this is a # mandatory setting for your site if you want to use Math codefences guessSyntax = falsePage’s Frontmatter +++ mathJaxInitialize = "{ \\"chtml\\": { \\"displayAlign\\": \\"left\\" } }" +++Examples Inline Math Inline math is generated if you use a single `$` as a delimiter around your formulae: {{< math >}}$\\sqrt{3}${{< /math >}}Inline math is generated if you use a single $ as a delimiter around your formulae: $\\sqrt{3}$\nBlocklevel Math with Right Alignment If you delimit your formulae by two consecutive `$$` it generates a new block. {{< math align="right" >}} $$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ {{< /math >}}If you delimit your formulae by two consecutive $$ it generates a new block.\n$$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ Codefence You can also use codefences.\n```math $$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ ``` $$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$Chemical Formulae {{< math >}} $$\\ce{Hg^2+ ->[I-] HgI2 ->[I-] [Hg^{II}I4]^2-}$$ {{< /math >}} $$\\ce{Hg^2+ ->[I-] HgI2 ->[I-] [Hg^{II}I4]^2-}$$ ',description:"Beautiful math and chemical formulae",tags:null,title:"Math",uri:"/_shortcodes/math/index.html"},{breadcrumb:"Shortcodes",content:'The mermaid shortcode generates diagrams and flowcharts from text, in a similar manner as Markdown using the Mermaid library.\ngraph LR; If --> Then Then --> Else Note This only works in modern browsers.\nUsage While the examples are using shortcodes with named parameter it is recommended to use codefences instead. This is because more and more other software supports Mermaid codefences (eg. GitHub) and so your markdown becomes more portable.\nYou are free to also call this shortcode from your own partials.\nNote To use codefence syntax you have to turn off guessSyntax for the markup.highlight setting (see the configuration section).\n​ codefence shortcode partial ```mermaid { align="center" zoom="true" } graph LR; If --> Then Then --> Else ``` {{< mermaid align="center" zoom="true" >}} graph LR; If --> Then Then --> Else {{< /mermaid >}} {{ partial "shortcodes/mermaid.html" (dict "page" . "content" "graph LR;\\nIf --> Then\\nThen --> Else" "align" "center" "zoom" "true" )}} The generated graphs can be be panned by dragging them and zoomed by using the mousewheel. On mobile devices you can use finger gestures.\nParameter Name Default Notes align center Allowed values are left, center or right. zoom see notes Whether the graph is pan- and zoomable.\nIf not set the value is determined by the mermaidZoom setting of the site or the pages frontmatter or false if not set at all.\n- false: no pan or zoom\n- true: pan and zoom active <content> <empty> Your Mermaid graph. Configuration Mermaid is configured with default settings. You can customize Mermaid’s default settings for all of your files thru a JSON object in your config.toml, override these settings per page thru your pages frontmatter or override these setting per diagramm thru diagram directives.\nThe JSON object of your config.toml / frontmatter is forwarded into Mermaid’s mermaid.initialize() function.\nSee Mermaid documentation for all allowed settings.\nThe theme setting can also be set by your used color variant. This will be the sitewide default and can - again - be overridden by your settings in config.toml, frontmatter or diagram directives.\nNote To use codefence syntax you have to turn off guessSyntax for the markup.highlight setting.\nGlobal Configuration File [params] mermaidInitialize = "{ \\"theme\\": \\"dark\\" }" mermaidZoom = true [markup] [markup.highlight] # if `guessSyntax = true`, there will be no unstyled code even if no language # was given BUT Mermaid and Math codefences will not work anymore! So this is a # mandatory setting for your site if you want to use Mermaid codefences guessSyntax = falsePage’s Frontmatter +++ mermaidInitialize = "{ \\"theme\\": \\"dark\\" }" mermaidZoom = true +++Examples Flowchart with YAML-Title {{< mermaid >}} --- title: Example Diagram --- graph LR; A[Hard edge] -->|Link text| B(Round edge) B --> C{<strong>Decision</strong>} C -->|One| D[Result one] C -->|Two| E[Result two] {{< /mermaid >}} --- title: Example Diagram --- graph LR; A[Hard edge] -->|Link text| B(Round edge) B --> C{<strong>Decision</strong>} C -->|One| D[Result one] C -->|Two| E[Result two] Sequence Diagram with Configuration Directive {{< mermaid >}} %%{init:{"fontFamily":"monospace", "sequence":{"showSequenceNumbers":true}}}%% sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! {{< /mermaid >}} %%{init:{"fontFamily":"monospace", "sequence":{"showSequenceNumbers":true}}}%% sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Class Diagram with Codefence Syntax ```mermaid classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ``` classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() }State Diagram Aligned to the Right {{< mermaid align="right" >}} stateDiagram-v2 open: Open Door closed: Closed Door locked: Locked Door open --> closed: Close closed --> locked: Lock locked --> closed: Unlock closed --> open: Open {{< /mermaid >}} stateDiagram-v2 open: Open Door closed: Closed Door locked: Locked Door open --> closed: Close closed --> locked: Lock locked --> closed: Unlock closed --> open: Open Entity Relationship Model with Non-Default Mermaid Theme {{< mermaid >}} %%{init:{"theme":"forest"}}%% erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : "liable for" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : "ordered in" {{< /mermaid >}} %%{init:{"theme":"forest"}}%% erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : "liable for" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : "ordered in" User Journey {{< mermaid >}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me {{< /mermaid >}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me GANTT Chart {{< mermaid >}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to Mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to Mermaid :1d {{< /mermaid >}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to Mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to Mermaid :1d Pie Chart without Zoom {{< mermaid zoom="false" >}} pie title Pets adopted by volunteers "Dogs" : 386 "Cats" : 85 "Rats" : 15 {{< /mermaid >}} pie title Pets adopted by volunteers "Dogs" : 386 "Cats" : 85 "Rats" : 15 Quadrant Chart {{< mermaid >}} pie title Pets adopted by volunteers title Reach and engagement of campaigns x-axis Low Reach --> High Reach y-axis Low Engagement --> High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved Campaign A: [0.3, 0.6] Campaign B: [0.45, 0.23] Campaign C: [0.57, 0.69] Campaign D: [0.78, 0.34] Campaign E: [0.40, 0.34] Campaign F: [0.35, 0.78] {{< /mermaid >}} quadrantChart title Reach and engagement of campaigns x-axis Low Reach --> High Reach y-axis Low Engagement --> High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved Campaign A: [0.3, 0.6] Campaign B: [0.45, 0.23] Campaign C: [0.57, 0.69] Campaign D: [0.78, 0.34] Campaign E: [0.40, 0.34] Campaign F: [0.35, 0.78] Requirement Diagram {{< mermaid >}} requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -> test_req {{< /mermaid >}} requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -> test_req Git Graph {{< mermaid >}} gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit {{< /mermaid >}} gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit C4 Diagrams {{< mermaid >}} C4Context title System Context diagram for Internet Banking System Enterprise_Boundary(b0, "BankBoundary0") { Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.") Person(customerB, "Banking Customer B") Person_Ext(customerC, "Banking Customer C", "desc") Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.") System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.") Enterprise_Boundary(b1, "BankBoundary") { SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.") System_Boundary(b2, "BankBoundary2") { System(SystemA, "Banking System A") System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.") } System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.") SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.") Boundary(b3, "BankBoundary3", "boundary") { SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.") SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.") } } } BiRel(customerA, SystemAA, "Uses") BiRel(SystemAA, SystemE, "Uses") Rel(SystemAA, SystemC, "Sends e-mails", "SMTP") Rel(SystemC, customerA, "Sends e-mails to") UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red") UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5") UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10") UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50") UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20") UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1") {{< /mermaid >}} C4Context title System Context diagram for Internet Banking System Enterprise_Boundary(b0, "BankBoundary0") { Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.") Person(customerB, "Banking Customer B") Person_Ext(customerC, "Banking Customer C", "desc") Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.") System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.") Enterprise_Boundary(b1, "BankBoundary") { SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.") System_Boundary(b2, "BankBoundary2") { System(SystemA, "Banking System A") System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.") } System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.") SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.") Boundary(b3, "BankBoundary3", "boundary") { SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.") SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.") } } } BiRel(customerA, SystemAA, "Uses") BiRel(SystemAA, SystemE, "Uses") Rel(SystemAA, SystemC, "Sends e-mails", "SMTP") Rel(SystemC, customerA, "Sends e-mails to") UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red") UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5") UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10") UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50") UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20") UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1") Mindmaps {{< mermaid >}} mindmap root((mindmap)) Origins Long history ::icon(fa fa-book) Popularisation British popular psychology author Tony Buzan Research On effectiveness<br/>and features On Automatic creation Uses Creative techniques Strategic planning Argument mapping Tools Pen and paper Mermaid {{< /mermaid >}} mindmap root((mindmap)) Origins Long history ::icon(fa fa-book) Popularisation British popular psychology author Tony Buzan Research On effectiveness<br/>and features On Automatic creation Uses Creative techniques Strategic planning Argument mapping Tools Pen and paper Mermaid Timeline {{< mermaid >}} timeline title History of Social Media Platform 2002 : LinkedIn 2004 : Facebook : Google 2005 : Youtube 2006 : Twitter {{< /mermaid >}} timeline title History of Social Media Platform 2002 : LinkedIn 2004 : Facebook : Google 2005 : Youtube 2006 : Twitter Sankey {{< mermaid >}} sankey-beta %% source,target,value Electricity grid,Over generation / exports,104.453 Electricity grid,Heating and cooling - homes,113.726 Electricity grid,H2 conversion,27.14 {{< /mermaid >}} sankey-beta %% source,target,value Electricity grid,Over generation / exports,104.453 Electricity grid,Heating and cooling - homes,113.726 Electricity grid,H2 conversion,27.14 ',description:"Generate diagrams and flowcharts from text",tags:null,title:"Mermaid",uri:"/_shortcodes/mermaid/index.html"},{breadcrumb:"Tags",content:"",description:"",tags:null,title:"Tag :: non-hidden",uri:"/tags/non-hidden/index.html"},{breadcrumb:"Shortcodes",content:`The notice shortcode shows various types of disclaimers with adjustable color, title and icon to help you structure your page.
There may be pirates It is all about the boxes.
Usage While the examples are using shortcodes with named parameter you are free to use positional as well or also call this shortcode from your own partials.
​ shortcode shortcode (positional) partial {{% notice style="primary" title="There may be pirates" icon="skull-crossbones" %}} It is all about the boxes. {{% /notice %}} {{% notice primary "There may be pirates" "skull-crossbones" %}} It is all about the boxes. {{% /notice %}} {{ partial "shortcodes/notice.html" (dict "page" . "style" "primary" "title" "There may be pirates" "icon" "skull-crossbones" "content" "It is all about the boxes." )}} Parameter Name Position Default Notes style 1 default The style scheme used for the box.
- by severity: info, note, tip, warning
- by brand color: primary, secondary, accent
- by color: blue, green, grey, orange, red
- by special color: default, transparent, code color see notes The CSS color value to be used. If not set, the chosen color depends on the style. Any given value will overwrite the default.
- for severity styles: a nice matching color for the severity
- for all other styles: the corresponding color title 2 see notes Arbitrary text for the box title. Depending on the style there may be a default title. Any given value will overwrite the default.
- for severity styles: the matching title for the severity
- for all other styles: <empty>
If you want no title for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) icon 3 see notes Font Awesome icon name set to the left of the title. Depending on the style there may be a default icon. Any given value will overwrite the default.
- for severity styles: a nice matching icon for the severity
- for all other styles: <empty>
If you want no icon for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) <content> <empty> Arbitrary text to be displayed in box. Examples By Severity Info with markup {{% notice style="info" %}} An **information** disclaimer You can add standard markdown syntax: - multiple paragraphs - bullet point lists - _emphasized_, **bold** and even ***bold emphasized*** text - [links](https://example.com) - etc. \`\`\`plaintext ...and even source code \`\`\` > the possibilities are endless (almost - including other shortcodes may or may not work) {{% /notice %}} Info An information disclaimer
You can add standard markdown syntax:
multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links etc. ...and even source code the possibilities are endless (almost - including other shortcodes may or may not work)
Note {{% notice style="note" %}} A **notice** disclaimer {{% /notice %}} Note A notice disclaimer
Tip {{% notice style="tip" %}} A **tip** disclaimer Tip A tip disclaimer
Warning {{% notice style="warning" %}} A **warning** disclaimer {{% /notice %}} Warning A warning disclaimer
Warning with Non-Default Title and Icon {{% notice style="warning" title="Here are dragons" icon="dragon" %}} A **warning** disclaimer {{% /notice %}} Here are dragons A warning disclaimer
Warning without a Title and Icon {{% notice style="warning" title=" " icon=" " %}} A **warning** disclaimer {{% /notice %}} A warning disclaimer
By Brand Colors Primary with Title only {{% notice style="primary" title="Primary" %}} A **primary** disclaimer {{% /notice %}} Primary A primary disclaimer
Secondary with Icon only {{% notice style="secondary" icon="stopwatch" %}} A **secondary** disclaimer {{% /notice %}} A secondary disclaimer
Accent {{% notice style="accent" %}} An **accent** disclaimer {{% /notice %}} An accent disclaimer
By Color Blue without a Title and Icon {{% notice style="blue" %}} A **blue** disclaimer {{% /notice %}} A blue disclaimer
Green with Title only {{% notice style="green" title="Green" %}} A **green** disclaimer {{% /notice %}} Green A green disclaimer
Grey with Icon only {{% notice style="grey" icon="bug" %}} A **grey** disclaimer {{% /notice %}} A grey disclaimer
Orange with Title and Icon {{% notice style="orange" title="Orange" icon="bug" %}} A **orange** disclaimer {{% /notice %}} Orange A orange disclaimer
Red without a Title and Icon {{% notice style="red" %}} A **red** disclaimer {{% /notice %}} A red disclaimer
By Special Color Default with Positional Parameter {{% notice default "Pay Attention to this Note!" "skull-crossbones" %}} Some serious information. {{% /notice %}} Pay Attention to this Note! Some serious information.
Transparent with Title and Icon {{% notice style="transparent" title="Pay Attention to this Note!" icon="skull-crossbones" %}} Some serious information. {{% /notice %}} Pay Attention to this Note! Some serious information.
With User-Defined Color, Font Awesome Brand Icon and Markdown Title {{% notice color="fuchsia" title="**Hugo**" icon="fab fa-hackerrank" %}} Victor? Is it you? {{% /notice %}} Hugo Victor? Is it you?
`,description:"Disclaimers to help you structure your page",tags:null,title:"Notice",uri:"/_shortcodes/notice/index.html"},{breadcrumb:"Shortcodes",content:`The openapi shortcode uses the Swagger UI library to display your OpenAPI / Swagger specifications.
Note This only works in modern browsers.
Usage While the examples are using shortcodes with named parameter you are free to also call this shortcode from your own partials.
​ shortcode partial {{< openapi src="https://petstore3.openapi.io/api/v3/openapi.json" >}} {{ partial "shortcodes/openapi.html" (dict "page" . "src" "https://petstore3.openapi.io/api/v3/openapi.json" )}} Parameter Name Default Notes src <empty> The URL to the OpenAPI specification file. This can be relative to the URL of your page if it is a leaf or branch bundle. Note If you want to print out (or generate a PDF) from your OpenAPI documentation, don’t initiate printing directly from the page because the elements are optimized for interactive usage in a browser.
Instead, open the print preview in your browser and initiate printing from that page. This page is optimized for reading and expands most of the available sections.
Example Using Local File {{< openapi src="petstore.json" >}} `,description:"UI for your OpenAPI / Swagger specifications",tags:null,title:"OpenAPI",uri:"/_shortcodes/openapi/index.html"},{breadcrumb:"Shortcodes > Children > page 1",content:`This is a demo child page with a hidden child. You can still access the hidden child directly or via the search.
Subpages of this page page 1-1-1 (hidden) page 1-1-2 (headless) page 1-1-3 `,description:"This is a demo child page",tags:["children","non-hidden"],title:"page 1-1",uri:"/_shortcodes/children/children-1/children-1-1/index.html"},{breadcrumb:"Shortcodes > Children > page 1 > page 1-1",content:`This is a hidden demo child page. This page and all its children are hidden in the menu, arrow navigation and children shortcode as long as you aren’t viewing this page or its children directly.
Subpages of this page page 1-1-1-1 `,description:"This is a hidden demo child page",tags:["children","hidden"],title:"page 1-1-1 (hidden)",uri:"/_shortcodes/children/children-1/children-1-1/children-1-1-1/index.html"},{breadcrumb:"Shortcodes > Children > page 1 > page 1-1 > page 1-1-1 (hidden)",content:`This is a non-hidden demo child page of a hidden parent page with a hidden child. You can still access the hidden child directly or via the search.
Subpages of this page page 1-1-1-1-1 (hidden) `,description:"This is a non-hidden demo child page of a hidden parent page",tags:["children","hidden"],title:"page 1-1-1-1",uri:"/_shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/index.html"},{breadcrumb:"Shortcodes > Children > page 1 > page 1-1 > page 1-1-1 (hidden) > page 1-1-1-1",content:`This is a hidden demo child page. This page and all its children are hidden in the menu, arrow navigation and children shortcode as long as you aren’t viewing this page or its children directly.
Subpages of this page page 1-1-1-1-1-1 `,description:"This is a hidden demo child page",tags:["children","hidden"],title:"page 1-1-1-1-1 (hidden)",uri:"/_shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/index.html"},{breadcrumb:"Shortcodes > Children > page 1 > page 1-1 > page 1-1-1 (hidden) > page 1-1-1-1 > page 1-1-1-1-1 (hidden)",content:`This is a non-hidden demo child page of a hidden parent page.
`,description:"This is a non-hidden demo child page of a hidden parent page",tags:["children","hidden"],title:"page 1-1-1-1-1-1",uri:"/_shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/children-1-1-1-1-1-1/index.html"},{breadcrumb:"Shortcodes > Children > page 1 > page 1-1 > page 1-1-2 (headless)",content:`This is a plain demo child page.
`,description:"This is a demo child page",tags:["children","non-hidden"],title:"page 1-1-2-1",uri:"/_shortcodes/children/children-1/children-1-1/children-1-1-2/children-1-1-2-1/index.html"},{breadcrumb:"Shortcodes > Children > page 1 > page 1-1 > page 1-1-2 (headless)",content:`This is a plain demo child page.
`,description:"This is a demo child page",tags:["children","non-hidden"],title:"page 1-1-2-2",uri:"/_shortcodes/children/children-1/children-1-1/children-1-1-2/children-1-1-2-2/index.html"},{breadcrumb:"Shortcodes > Children > page 1 > page 1-1",content:`This is a plain demo child page.
`,description:"This is a demo child page",tags:["children","non-hidden"],title:"page 1-1-3",uri:"/_shortcodes/children/children-1/children-1-1/children-1-1-3/index.html"},{breadcrumb:"Shortcodes > Children > page 3",content:`This is a plain demo child page.
`,description:"This is a plain page test nested in a parent",tags:["children","non-hidden"],title:"page 3-1",uri:"/_shortcodes/children/children-3/test3/index.html"},{breadcrumb:"Development",content:`Sometimes screenshots need to be redone. This page explains how to create the different screenshots, tools and settings
Common Creation:
Use English translation Empty search Remove history checkmarks but leave it on the page thats used for the screenshot After resize of the page into the required resolution, reload the page to have all scrollbars in default loading position Demo Screenshot Content:
A meaningful full-screen screenshot of an interesting page.
The content should be:
timeless: not showing any dates or often edited content interesting: show a bunch of interesting elements like headings, code, etc balanced: no cluttering with overpresent elements or coloring aligned: aligned outlines Used by:
Hugo Themes info: https://themes.gohugo.io/themes/hugo-theme-relearn/ 1000 x 1500 @ 1 Page URL: Screenshot Link
Creation:
save as images/screenshot.png Remarks:
The location is mandatory due to Hugo’s theme site builder.
Preview images/screenshot.png Hero Image Content:
Show the Demo Screenshot page on different devices and different themes. Composition of the different device screenshots into a template.
The content should be:
consistent: always use the same page for all devices pleasing: use a delightful background Used by:
Hugo Themes gallery: https://themes.gohugo.io/tags/docs/ 900 x 600 Hugo Themes notes: https://themes.gohugo.io/themes/hugo-theme-relearn/ 1280 x 640 GitHub project site: https://github.com/McShelby/hugo-theme-relearn 1280 x 640 GitHub social media preview: https://github.com/McShelby/hugo-theme-relearn/settings 1280 x 640 Page URL: Hero Image Link
Creation:
Template: http://www.pixeden.com/psd-web-elements/psd-screen-web-showcase Desktop: light theme 1440 x 900 @ 1 Tablet: light theme 778 x 1038 @ 1 Phone: dark theme 450 x 801 @ .666 From original template size resize to 2700 x 1800 centered, scale to 900 x 600 and save as images/tn.png From original template size resize to 3000 x 1500 offset y: -330, scale to 1280 x 640 and save as images/hero.png Remarks:
The location of images/tn.png is mandatory due to Hugo’s theme site builder.
Preview images/hero.png Preview images/tn.png `,description:"Recipe to create various documentation screenshots",tags:null,title:"Screenshots",uri:"/_dev/screenshots/index.html"},{breadcrumb:"Shortcodes",content:`The siteparam shortcode prints values of site params.
Usage While the examples are using shortcodes with named parameter you are free to use positional aswell or call this shortcode from your own partials.
​ shortcode shortcode (positional) partial {{% siteparam name="editURL" %}} {{% siteparam "editURL" %}} {{ partial "shortcodes/siteparam.html" (dict "page" . "name" "editURL" )}} Parameter Name Position Default Notes name 1 <empty> The name of the site param to be displayed. Examples editURL from config.toml \`editURL\` value: {{% siteparam name="editURL" %}}editURL value: https://github.com/adpit/arie_digital/edit/main/content/
Nested parameter with Markdown and HTML formatting To use formatted parameter, add this in your config.toml:
[markup.goldmark.renderer] unsafe = true ​ config.toml [params] [params.siteparam.test] text = "A **nested** parameter <b>with</b> formatting" Formatted parameter: {{% siteparam name="siteparam.test.text" %}}Formatted parameter: A nested parameter <b>with</b> formatting
`,description:"Get value of site params",tags:null,title:"SiteParam",uri:"/_shortcodes/siteparam/index.html"},{breadcrumb:"Shortcodes",content:'You can use a tab shortcode to display a single tab.\nThis is especially useful if you want to flag your code example with an explicit language.\nIf you want multiple tabs grouped together you can wrap your tabs into the tabs shortcode.\n​ c printf("Hello World!"); Usage While the examples are using shortcodes with named parameter you are free to also call this shortcode from your own partials.\n​ shortcode partial {{% tab title="c" %}} ```c printf("Hello World!"); ``` {{% /tab %}} {{ partial "shortcodes/tab.html" (dict "page" . "title" "c" "content" ("```c\\nprintf(\\"Hello World!\\")\\n```" | .RenderString) )}} Parameter Name Default Notes style see notes The style scheme used for the tab. If you don’t set a style and you display a single code block inside of the tab, its default styling will adapt to that of a code block. Otherwise default is used.\n- by severity: info, note, tip, warning\n- by brand color: primary, secondary, accent\n- by color: blue, green, grey, orange, red\n- by special color: default, transparent, code color see notes The CSS color value to be used. If not set, the chosen color depends on the style. Any given value will overwrite the default.\n- for severity styles: a nice matching color for the severity\n- for all other styles: the corresponding color title see notes Arbitrary title for the tab. Depending on the style there may be a default title. Any given value will overwrite the default.\n- for severity styles: the matching title for the severity\n- for all other styles: <empty>\nIf you want no title for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) icon see notes Font Awesome icon name set to the left of the title. Depending on the style there may be a default icon. Any given value will overwrite the default.\n- for severity styles: a nice matching icon for the severity\n- for all other styles: <empty>\nIf you want no icon for a severity style, you have to set this parameter to " " (a non empty string filled with spaces) <content> <empty> Arbitrary text to be displayed in the tab. Examples Single Code Block with Collapsed Margins {{% tab title="Code" %}} ```python printf("Hello World!"); ``` {{% /tab %}} ​ Code printf("Hello World!"); Mixed Markdown Content {{% tab title="_**Mixed**_" %}} A tab can not only contain code but arbitrary text. In this case text **and** code will get a margin. ```python printf("Hello World!"); ``` {{% /tab %}} ​ Mixed A tab can not only contain code but arbitrary text. In this case text and code will get a margin.\nprintf("Hello World!"); Understanding style and color Behavior The style parameter affects how the color parameter is applied.\n{{< tabs >}} {{% tab title="just colored style" style="blue" %}} The `style` parameter is set to a color style. This will set the background to a lighter version of the chosen style color as configured in your theme variant. {{% /tab %}} {{% tab title="just color" color="blue" %}} Only the `color` parameter is set. This will set the background to a lighter version of the chosen CSS color value. {{% /tab %}} {{% tab title="default style and color" style="default" color="blue" %}} The `style` parameter affects how the `color` parameter is applied. The `default` style will set the background to your `--MAIN-BG-color` as configured for your theme variant resembling the default style but with different color. {{% /tab %}} {{% tab title="just severity style" style="info" %}} The `style` parameter is set to a severity style. This will set the background to a lighter version of the chosen style color as configured in your theme variant and also affects the chosen icon. {{% /tab %}} {{% tab title="severity style and color" style="info" color="blue" %}} The `style` parameter affects how the `color` parameter is applied. This will set the background to a lighter version of the chosen CSS color value and also affects the chosen icon. {{% /tab %}} {{< /tabs >}} ​ just colored style just color default style and color just severity style severity style and color The style parameter is set to a color style.\nThis will set the background to a lighter version of the chosen style color as configured in your theme variant.\nOnly the color parameter is set.\nThis will set the background to a lighter version of the chosen CSS color value.\nThe style parameter affects how the color parameter is applied.\nThe default style will set the background to your --MAIN-BG-color as configured for your theme variant resembling the default style but with different color.\nThe style parameter is set to a severity style.\nThis will set the background to a lighter version of the chosen style color as configured in your theme variant and also affects the chosen icon.\nThe style parameter affects how the color parameter is applied.\nThis will set the background to a lighter version of the chosen CSS color value and also affects the chosen icon.\n',description:"Show content in a single tab",tags:null,title:"Tab",uri:"/_shortcodes/tab/index.html"},{breadcrumb:"Shortcodes",content:'The tabs shortcode displays arbitrary content in an unlimited number of tabs.\nThis comes in handy eg. for providing code snippets for multiple languages.\nIf you just want a single tab you can instead call the tab shortcode standalone.\nhello. py sh c print("Hello World!") echo "Hello World!" printf("Hello World!"); Usage While the examples are using shortcodes with named parameter you are free to also call this shortcode from your own partials.\nSee the tab shortcode for a description of the parameter for nested tabs.\n​ shortcode partial {{< tabs title="hello." >}} {{% tab title="py" %}} ```python print("Hello World!") ``` {{% /tab %}} {{% tab title="sh" %}} ```bash echo "Hello World!" ``` {{% /tab %}} {{% tab title="c" %}} ```c printf"Hello World!"); ``` {{% /tab %}} {{< /tabs >}} {{ partial "shortcodes/tabs.html" (dict "page" . "title" "hello." "content" (slice (dict "title" "py" "content" ("```python\\nprint(\\"Hello World!\\")\\n```" | .RenderString) ) (dict "title" "sh" "content" ("```bash\\necho \\"Hello World!\\"\\n```" | .RenderString) ) (dict "title" "c" "content" ("```c\\nprintf(\\"Hello World!\\");\\n```" | .RenderString) ) ) )}} Parameter Name Default Notes groupid <random> Arbitrary name of the group the tab view belongs to.\nTab views with the same groupid sychronize their selected tab. The tab selection is restored automatically based on the groupid for tab view. If the selected tab can not be found in a tab group the first tab is selected instead.\nThis sychronization applies to the whole site! style <empty> Sets a default value for every contained tab. Can be overridden by each tab. See the tab shortcode for possible values. color <empty> Sets a default value for every contained tab. Can be overridden by each tab. See the tab shortcode for possible values. title <empty> Arbitrary title written in front of the tab view. icon <empty> Font Awesome icon name set to the left of the title. <content> <empty> Arbitrary number of tabs defined with the tab sub-shortcode. Examples Behavior of the groupid See what happens to the tab views while you select different tabs.\nWhile pressing a tab of Group A switches all tab views of Group A in sync (if the tab is available), the tabs of Group B are left untouched.\n​ Group A, Tab View 1 Group A, Tab View 2 Group B {{< tabs groupid="a" >}} {{% tab title="json" %}} {{< highlight json "linenos=true" >}} { "Hello": "World" } {{< /highlight >}} {{% /tab %}} {{% tab title="_**XML**_ stuff" %}} ```xml <Hello>World</Hello> ``` {{% /tab %}} {{% tab title="text" %}} Hello World {{% /tab %}} {{< /tabs >}} {{< tabs groupid="a" >}} {{% tab title="json" %}} {{< highlight json "linenos=true" >}} { "Hello": "World" } {{< /highlight >}} {{% /tab %}} {{% tab title="XML stuff" %}} ```xml <Hello>World</Hello> ``` {{% /tab %}} {{< /tabs >}} {{< tabs groupid="b" >}} {{% tab title="json" %}} {{< highlight json "linenos=true" >}} { "Hello": "World" } {{< /highlight >}} {{% /tab %}} {{% tab title="XML stuff" %}} ```xml <Hello>World</Hello> ``` {{% /tab %}} {{< /tabs >}} Group A, Tab View 1 ​ json XML stuff text 1{ "Hello": "World" } <Hello>World</Hello> Hello World Group A, Tab View 2 ​ json XML stuff 1{ "Hello": "World" } <Hello>World</Hello> Group B ​ json XML stuff 1{ "Hello": "World" } <Hello>World</Hello> Nested Tab Views and Color In case you want to nest tab views, the parent tab that contains nested tab views needs to be declared with {{< tab >}} instead of {{% tab %}}. Note, that in this case it is not possible to put markdown in the parent tab.\nYou can also set style and color parameter for all tabs and overwrite them on tab level. See the tab shortcode for possible values.\n{{< tabs groupid="main" style="primary" title="Rationale" icon="thumbtack" >}} {{< tab title="Text" >}} Simple text is possible here... {{< tabs groupid="tabs-example-language" >}} {{% tab title="python" %}} Python is **super** easy. - most of the time. - if you don\'t want to output unicode {{% /tab %}} {{% tab title="bash" %}} Bash is for **hackers**. {{% /tab %}} {{< /tabs >}} {{< /tab >}} {{< tab title="Code" style="default" color="darkorchid" >}} ...but no markdown {{< tabs groupid="tabs-example-language" >}} {{% tab title="python" %}} ```python print("Hello World!") ``` {{% /tab %}} {{% tab title="bash" %}} ```bash echo "Hello World!" ``` {{% /tab %}} {{< /tabs >}} {{< /tab >}} {{< /tabs >}} Rationale Text Code Simple text is possible here... ​ python bash Python is super easy.\nmost of the time. if you don’t want to output unicode Bash is for hackers.\n...but no markdown ​ python bash print("Hello World!") echo "Hello World!" ',description:"Show content in tabbed views",tags:null,title:"Tabs",uri:"/_shortcodes/tabs/index.html"},{breadcrumb:"Categories",content:"",description:"",tags:null,title:"Category :: taxonomy",uri:"/categories/taxonomy/index.html"},{breadcrumb:"Categories",content:"",description:"",tags:null,title:"Category :: theming",uri:"/categories/theming/index.html"}]